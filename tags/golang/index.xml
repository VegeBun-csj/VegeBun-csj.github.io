<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in golang on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Oct 2020 21:24:00 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>链码常见的API</title>
      <link>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/%E9%93%BE%E7%A0%81%E5%B8%B8%E8%A7%81%E7%9A%84api/</link>
      <pubDate>Sun, 18 Oct 2020 21:24:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/%E9%93%BE%E7%A0%81%E5%B8%B8%E8%A7%81%E7%9A%84api/</guid>
      <description>levelDB和CouchDB都支持的API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 //键的写入 PutState(key string, value []byte) error //单个键的查询 GetState(key string) ([]byte, error) //键的范围查询(左</description>
    </item>
    
    <item>
      <title>fabric事件的监听使用</title>
      <link>http://localhost:1313/post/fabricnodesdk/%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 29 Aug 2020 14:34:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabricnodesdk/%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>使用fabric-network如何监听事件 本教程描述了使用fabricnetwork模块监听网络发出的事件的不同方法。 概览有三种事件类型可</description>
    </item>
    
    <item>
      <title>链码的访问控制(cid库)</title>
      <link>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/cid%E9%93%BE%E7%A0%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%BA%93/</link>
      <pubDate>Sat, 29 Aug 2020 13:27:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/cid%E9%93%BE%E7%A0%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%BA%93/</guid>
      <description>Client Identity Chaincode Library（客户端标识链代码库） The client identity chaincode library enables you to write chaincode which makes access control decisions based on the identity of the client (i.e. the invoker of the chaincode). In particular, you may make access control decisions based on either or both of the following associated with the client: 客</description>
    </item>
    
  </channel>
</rss>