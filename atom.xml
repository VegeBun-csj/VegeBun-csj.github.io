<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">VegeBun-csj’s blog</title>
    <subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle>
    <updated>2020-08-29T15:37:32&#43;08:00</updated>
    <id>https://VegeBun-csj.github.io/</id>
    <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://VegeBun-csj.github.io/atom.xml" />
    <author>
            <name>Bun</name>
            <uri>https://VegeBun-csj.github.io/</uri>
            
                <email>1071285741@qq.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.74.3">Hugo</generator>
        <entry>
            <title type="text">IPFS-js的简单使用</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/ipfs/ipfs-js%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" />
            <id>https://VegeBun-csj.github.io/posts/ipfs/ipfs-js%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-08-29T15:37:06&#43;08:00</updated>
            <published>2020-08-29T14:51:33&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/ipfs/" term="IPFS" label="IPFS" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/javascript/" term="javascript" label="javascript" />
                            
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/" term="分布式存储" label="分布式存储" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">fabric事件的监听使用</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/fabricnodesdk/%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E4%BD%BF%E7%94%A8/" />
            <id>https://VegeBun-csj.github.io/posts/fabricnodesdk/%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-08-29T14:47:19&#43;08:00</updated>
            <published>2020-08-29T14:34:22&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">使用fabric-network如何监听事件 本教程描述了使用fabricnetwor……</summary>
            
                <content type="html">&lt;h2 id=&#34;使用fabric-network如何监听事件&#34;&gt;&lt;strong&gt;使用fabric-network如何监听事件&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;本教程描述了使用fabricnetwork模块监听网络发出的事件的不同方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概览有三种事件类型可以订阅&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;合约事件（contract event）——那些由chaincode开发人员在事务中显式发出的事件&lt;/li&gt;
&lt;li&gt;事务(提交)事件(transaction event)——在调用后提交事务时自动发出的事件&lt;/li&gt;
&lt;li&gt;块事件（Block event）——当一个块被提交时自动发出的事件侦听这些事件允许应用程序在不直接调用事务的情况下进行响应。这在监视网络分析等用例中非常理想&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个侦听器类型至少接受一个参数，即事件回调。这是接收到事件时调用的函数。 给定的回调函数应该是一个promise，这意味着回调可以执行异步任务而不会有丢失事件的风险&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可选项&lt;a href=&#34;https://hyperledger.github.io/fabric-sdk-node/release-1.4/module-fabric-network.Network.html#~EventListenerOptions&#34;&gt;module:fabric-network.Network~EventListenerOptions&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意:监听器(listener)将连接到事件集线器（event hub），并请求&lt;strong&gt;默认接收未过滤的事件&lt;/strong&gt;。要接收过滤的事件，请设置 &lt;em&gt;EventListenerOptions.filtered: true&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有事件监听器(包括使用事务ID的commiteventlistener)在网络级别上必须有&lt;strong&gt;唯一的名称&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;contract-events&#34;&gt;Contract events&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connectionProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gatewayOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mychannel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getContract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my-contract&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {String} listenerName the name of the event listener
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {String} eventName the name of the event being listened to
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {Function} callback the callback function with signature (error, event, blockNumber, transactionId, status)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {module:fabric-network.Network~EventListenerOptions} options
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;**/&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addContractListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my-contract-listener&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sale&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transactionId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Block Number: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;blockNumber&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; Transaction ID: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;transactionId&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; Status: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//注意，不需要指定事件中心event hub，因为EventHubSelectionStrategy将自动选择它。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;block-event&#34;&gt;Block event&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connectionProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gatewayOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mychannel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {String} listenerName the name of the event listener
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {Function} callback the callback function with signature (error, blockNumber, transactionId, status)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {module:fabric-network.Network~EventListenerOptions} options
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;**/&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addBlockListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my-block-listener&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Block: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//在侦听块事件时，指定是否需要过滤或未过滤事件非常重要，因为这将确定哪个事件中心与请求兼容。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;commit-events&#34;&gt;Commit events&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//注意:侦听器侦听器名称是transactionId。&amp;lt;一串随机的字符串&amp;gt;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;订阅事务提交事件有两种方法。
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;1.使用模块:fabric-network.Network  
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connectionProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gatewayOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mychannel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getContract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my-contract&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sell&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {String} transactionId the transaction ID
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {Function} callback the callback function with signature (error, transactionId, status, blockNumber)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {Object} options
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;**/&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//这里使用network的方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addCommitListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTransactionID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTransactionID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transactionId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Transaction ID: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;transactionId&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; Status: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; Block number: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;blockNumber&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;




&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;2.直接使用：fabric-network.Transaction。这种方式直接将需要指定希望侦听的事务ID抽象出来。
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connectionProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gatewayOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mychannel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getContract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my-contract&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sell&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {String} transactionId the transaction ID
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {Function} callback the callback function with signature (error, transactionId, status, blockNumber)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * @param {Object} options
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;**/&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//这里使用transaction的方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addCommitListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transactionId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Transaction ID: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;transactionId&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; Status: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; Block number: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;blockNumber&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Network.addCommitListener&lt;/strong&gt;和&lt;strong&gt;contract.addCommitListener&lt;/strong&gt;有一个可选的&lt;strong&gt;eventHub&lt;/strong&gt;参数。设置后，侦听器将只侦听该&lt;strong&gt;eventhub&lt;/strong&gt;，并且在发生意外断开连接时，它将尝试并重新连接，而&lt;strong&gt;不使用EventHubSelectionStrategy&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;合约事件contract-event的使用比较频繁在链码中相应的方法中添加相关的事件使用如下方法&#34;&gt;合约事件(Contract event)的使用比较频繁，在链码中相应的方法中添加相关的事件，使用如下方法&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;tx_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;APIstub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetTxID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;eventpayload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; this transactionId is&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tx_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;and this contract has been operated&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;APIstub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;changeCar_Event&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eventpayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to emit event&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意上面的写法，其中就是调用了stub的SetEvent方法， 其中传入&lt;strong&gt;两个参数&lt;/strong&gt;，第一个参数就是该事件的名（自定义，这个名字就是sdk进行addContractListener的时候会用到唯一的事件名），第二个参数就是[]]byte类型的event的payload&lt;/p&gt;
&lt;p&gt;payload是自定义格式的，可以是json反序列化后的字符串，也可以是一条语句，看你自定义的事件输出格式，到时候这个payload在sdk调用完链码之后会输出的，例如如果上面这个链码的方法被调用，那么在调用结束的时候，就会输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transactionId&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;交易id&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;been&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;operated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其他的事件也可以使用，看自己的需求了，使用事件可以节省很多查询的操作。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/hyperledger-fabric-nodesdk%E5%BC%80%E5%8F%91/" term="Hyperledger Fabric--NodeSDK开发" label="Hyperledger Fabric--NodeSDK开发" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/golang/" term="golang" label="golang" />
                            
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/javascript/" term="javascript" label="javascript" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">交易invoke的使用</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/fabricnodesdk/%E4%BA%A4%E6%98%93invoke%E7%9A%84%E4%BD%BF%E7%94%A8/" />
            <id>https://VegeBun-csj.github.io/posts/fabricnodesdk/%E4%BA%A4%E6%98%93invoke%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-08-29T14:31:40&#43;08:00</updated>
            <published>2020-08-29T14:25:47&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Fabric 1.4.x的新版高级API(Fabrci-NetWork模块)的使用 新版api引入……</summary>
            
                <content type="html">&lt;h2 id=&#34;fabric-14x的新版高级apifabrci-network模块的使用&#34;&gt;Fabric 1.4.x的新版高级API(Fabrci-NetWork模块)的使用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;新版api引入了fabric-network模块，在原来的fabric-client模块的基础上那个进行了再封装，对于交易的提交incvoke,查询query大大简化，该模块最核心的是两个功能类:&lt;/p&gt;
&lt;p&gt;1.&lt;code&gt;Gateway&lt;/code&gt;（网关类）:负责连接网络，并获取网络network实例，从而获取相应channel实例，合约contract实例，从而进行交易，以及相关事件的监听&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;FileSystemWallet&lt;/code&gt;（身份文件类）：创建并保存客户端的身份信息，用来进行网络通信的依据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老版本的api(1.4.x之前的版本)中提供了client创建transactionId的相关方法，并能返回相应的transactionId,但是对于官方的fabcar的案例，其中的invoke交易的使用非常的简单，但是却找不到相关的获取transactionId的方法,下面一行代码即可搞定invoke类型的交易，参数是（链码中的方法名，args[方法参数]），封装的极为“严实”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;submitTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;createCar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;CAR12&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Honda&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Accord&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Black&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;看这行代码时，找不到如何获取交易的ID,所以来详细看一下&lt;code&gt; submitTransaction&lt;/code&gt; 方法（该方法分别做了两件事：通过链码方法名创建transaction对象，再通过transaction对象的submit方法将链码方法的参数传入完成交易的背书），该方法位于&lt;code&gt;contract&lt;/code&gt; 的模块中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;submitTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在contract文件中再看到 &lt;code&gt;createTransaction&lt;/code&gt; 方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/* @param {String} name Transaction function name.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * @returns {module:fabric-network.Transaction} A transaction object.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;			 返回的是transaction对象
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;createTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;verifyTransactionName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;qualifiedName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_getQualifiedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;qualifiedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eventHandlerStrategy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getEventHandlerOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eventHandlerStrategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setEventHandlerStrategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eventHandlerStrategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此时转到 &lt;code&gt;transaction&lt;/code&gt; 文件中看到 &lt;code&gt;submit(...args)&lt;/code&gt; 方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;	&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * Submit a transaction to the ledger. The transaction function &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * will be evaluated on the endorsing peers and then submitted to the ordering service
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * for committing to the ledger.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * @async
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param {...String} [args] Transaction function arguments.   参数是调用的链码方法的所需参数
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @returns {Buffer} Payload response from the transaction function.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * @throws {module:fabric-network.TimeoutError} If the transaction was successfully submitted to the orderer but
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * timed out before a commit event was received from peers.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;verifyArguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_setInvokedOrThrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getChannel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;txId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_transactionId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTransactionID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getEventHandlerOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eventHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_createTxEventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_buildRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_endorsingPeers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;targets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_endorsingPeers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;commitTimeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;commitTimeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// in ms
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getConfigSetting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;request-timeout&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;commitTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;commitTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;commitTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

		&lt;span class=&#34;c1&#34;&gt;// node sdk will target all peers on the channel that are endorsingPeer or do something special for a discovery environment
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sendTransactionProposal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proposalResponses&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proposal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

		&lt;span class=&#34;c1&#34;&gt;// get only the valid responses to submit to the orderer
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;validResponses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_validatePeerResponses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proposalResponses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

		&lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startListening&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

		&lt;span class=&#34;c1&#34;&gt;// Submit the endorsed transaction to the primary orderers.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sendTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;proposalResponses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;validResponses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;proposal&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;util&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Failed to send peer responses for transaction %j to orderer. Response status: %j&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;txId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;logger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;submit:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;eventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cancelListening&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

		&lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eventHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;waitForEvents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;validResponses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过上面的分析，我们能可以不使用&lt;code&gt;submitTransaction&lt;/code&gt; 方法 ，而是使用其中的拆解的方法，分两步，从而提取出其中的tx_id ,在&lt;strong&gt;Fabric-network-Transaction类中看到有getTransactionID()方法,但是该方法返回的是一个transactionID对象，transactionId对象还有一个getTransationID方法，从而获得tx_id&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt; 		&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;createCar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;CAR21&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hahaha&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cccc&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cccccc&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tx_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTransactionID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTransactionID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这种写法第1，2行将原来的submitTransaction方法拆解为两步骤，由第一步的返回transaction对象来取得tx_id&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在获得了tx_id之后，有很多方面都可以顺利进行，包括channel中根据交易ID来进行相关的查询操作，包括事件的监听，可以通过再提交交易之后，立即返回交易id，从而避免了多余的查询。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/hyperledger-fabric-nodesdk%E5%BC%80%E5%8F%91/" term="Hyperledger Fabric--NodeSDK开发" label="Hyperledger Fabric--NodeSDK开发" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Cid链码访问控制库</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/chaincode%E5%BC%80%E5%8F%91/cid%E9%93%BE%E7%A0%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%BA%93/" />
            <id>https://VegeBun-csj.github.io/posts/chaincode%E5%BC%80%E5%8F%91/cid%E9%93%BE%E7%A0%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%BA%93/</id>
            <updated>2020-08-29T13:47:57&#43;08:00</updated>
            <published>2020-08-29T13:27:15&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Client Identity Chaincode Library（客户端标识链代码库，简称cid） The client identity chaincode library enables you to write chaincode which makes access control decisions……</summary>
            
                <content type="html">&lt;h3 id=&#34;client-identity-chaincode-library客户端标识链代码库简称cid&#34;&gt;Client Identity Chaincode Library（客户端标识链代码库，简称cid）&lt;/h3&gt;
&lt;p&gt;The client identity chaincode library enables you to write chaincode which
makes access control decisions based on the identity of the client
(i.e. the invoker of the chaincode).  In particular, you may make access
control decisions based on either or both of the following associated with
the client:&lt;/p&gt;
&lt;p&gt;客户端标识链码库使您能够编写基于客户端标识(即链码的调用者)进行访问控制决策的链码。
特别是，您可以根据与客户端关联的下列任一项或两项进行访问控制决策&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the client identity&#39;s MSP (Membership Service Provider) ID（客户端身份的MSP(会员服务提供者)ID）&lt;/li&gt;
&lt;li&gt;an attribute associated with the client identity（与客户端身份关联的属性）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attributes are simply name and value pairs associated with an identity.
For example, &lt;code&gt;email=me@gmail.com&lt;/code&gt; indicates an identity has the &lt;code&gt;email&lt;/code&gt;
attribute with a value of &lt;code&gt;me@gmail.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;属性只是与身份关联的键值对。例如，email=me@gmail.com表示一个有着email属性，值为me@gmail.com的身份&lt;/p&gt;
&lt;h3 id=&#34;使用方法&#34;&gt;使用方法&lt;/h3&gt;
&lt;p&gt;导入相关的包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/hyperledger/fabric/core/chaincode/lib/cid&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;h4 id=&#34;1getting-the-clients-id获取客户端id&#34;&gt;1.Getting the client&#39;s ID（获取客户端id）&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取客户端的ID，这个ID必须是唯一的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id, err := cid.GetID(stub)
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;h4 id=&#34;2getting-the-msp-id获取mspid&#34;&gt;2.Getting the MSP ID（获取mspid）&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取客户端身份的MSP ID:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mspid, err := cid.GetMSPID(stub)
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;h4 id=&#34;3getting-an-attribute-value获取属性值&#34;&gt;3.Getting an attribute value（获取属性值）&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取attr1属性的值:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val, ok, err := cid.GetAttributeValue(stub, &amp;quot;attr1&amp;quot;)
if err != nil {
   // There was an error trying to retrieve the attribute
}
if !ok {
   // The client identity does not possess the attribute
}
// Do something with the value of &#39;val&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;h4 id=&#34;4asserting-an-attribute-value-断言属性值判断attr的key是否为对应的value&#34;&gt;4.Asserting an attribute value 断言属性值（判断Attr的key是否为对应的value）&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常，您想做的就是根据属性的值做出访问控制决策，即断言属性的值。例如，如果客户端myapp.admin的属性值不为true，下面的代码将返回一个错误。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;err := cid.AssertAttributeValue(stub, &amp;quot;myapp.admin&amp;quot;, &amp;quot;true&amp;quot;)
if err != nil {
   // Return an error
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是有效地使用属性来实现基于角色的访问控制，简称RBAC。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;5获取客户端的x509证书&#34;&gt;5.获取客户端的X509证书&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何获得客户端的X509证书，如果客户端的身份不是基于X509证书，则为nil:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cert, err := cid.GetX509Certificate(stub)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，cert和err都可能为nil，如果客户端身份没有使用X509证书，则将出现这种情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;6更有效地执行多个操作&#34;&gt;6.更有效地执行多个操作&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时可能需要执行多个操作才能做出访问决策。例如，下面就是如何使用MSP org1MSP和attr1或MSP org1MSP和attr2授予身份的访问权。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Get the client ID object
id, err := cid.New(stub)
if err != nil {
   // Handle error
}
mspid, err := id.GetMSPID()
if err != nil {
   // Handle error
}
switch mspid {
   case &amp;quot;org1MSP&amp;quot;:
      err = id.AssertAttributeValue(&amp;quot;attr1&amp;quot;, &amp;quot;true&amp;quot;)
   case &amp;quot;org2MSP&amp;quot;:
      err = id.AssertAttributeValue(&amp;quot;attr2&amp;quot;, &amp;quot;true&amp;quot;)
   default:
      err = errors.New(&amp;quot;Wrong MSP&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although it is not required, it is more efficient to make the &lt;code&gt;cid.New&lt;/code&gt; call
to get the ClientIdentity object if you need to perform multiple operations,
as demonstrated above.&lt;/p&gt;
&lt;p&gt;虽然不是必需的。如果需要执行多个操作，用&lt;code&gt;cid.New&lt;/code&gt;调用来获取ClientIdentity对象是非常有效的，如上所示。&lt;/p&gt;
&lt;h3 id=&#34;adding-attributes-to-identities向身份添加属性&#34;&gt;Adding Attributes to Identities（向身份添加属性）&lt;/h3&gt;
&lt;p&gt;如何在使用Hyperledger Fabric CA时以及在使用外部CA时向证书添加自定义属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;1managing-attributes-with-fabric-ca使用fabric-ca管理属性&#34;&gt;1.Managing attributes with Fabric CA（使用Fabric CA管理属性）&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用fabric-ca向注册证书添加属性有两种方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当注册一个身份时，您可以指定为该身份颁发的登记证书（e-cert）在缺省情况下应该包含一个属性(attribute)。可以在注册时覆盖，但这对于建立默认行为非常有用，并且假设注册发生在应用程序之外，不需要对应用程序进行任何更改。&lt;/p&gt;
&lt;p&gt;下面就是如何使用两个属性 app1Admin和email注册user1。“:ecert”后缀在默认情况下会将appAdmin属性插入user1的登记证书（e-cert）中。默认情况下，是不会将email属性添加到登记证书(e-cert)中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方式其实是和在NodeSDK进行注册user时的操作是一样的，在创建新用户的时候，可以指定相应的attributes，而这个属性就可以作为后序在链码中进行getAttr的一个值，通过这个值是否符合预期来进行链码的访问控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;fabric-ca-client register --id.name user1 --id.secret user1pw --id.type user --id.affiliation org1 --id.attrs &#39;app1Admin=true:ecert,email=user1@gmail.com&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当您登记一个身份时，您可以请求将一个或多个属性添加到证书中。对于请求的每个属性，您可以指定该属性是否是可选的。如果该身份的属性是必选的，但不存在，则登记失败。&lt;/p&gt;
&lt;p&gt;下面展示了如何使用email属性注册user1，不使用app1Admin属性，也可以使用phone属性(如果用户拥有phone属性)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fabric-ca-client enroll -u http://user1:user1pw@localhost:7054 --enrollment.attrs &amp;quot;email,phone:opt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;2attribute-format-in-a-certificate-证书中的属性格式&#34;&gt;2.Attribute format in a certificate （证书中的属性格式）&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;属性作为扩展名存储在X509证书中，其ASN.1 OID(抽象语法符号对象标识符)为1.2.3.4.5.6.7.8.1。该扩展的值是以{&amp;quot;attrs&amp;quot;:{&lt;attrName&gt;:&amp;lt;attrValue}}（属性名，属性值这种键值对）为形式的JSON字符串。下面是一个证书示例，其中包含值为val1的attr1属性。还要注意，JSON条目可以包含多个属性，但本示例只显示了一个属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            1e:49:98:e9:f4:4f:d0:03:53:bf:36:81:c0:a0:a4:31:96:4f:52:75
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=fabric-ca-server
        Validity
            Not Before: Sep  8 03:42:00 2017 GMT
            Not After : Sep  8 03:42:00 2018 GMT
        Subject: CN=MyTestUserWithAttrs
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
            EC Public Key:
                pub:
                    04:e6:07:5a:f7:09:d5:af:38:e3:f7:a2:90:77:0e:
                    32:67:5b:70:a7:37:ca:b5:c9:d8:91:77:39:ae:03:
                    a0:36:ad:72:b3:3c:89:6d:1e:f6:1b:6d:2a:88:49:
                    92:6e:6e:cc:bc:81:52:fa:19:88:18:5c:d7:6e:eb:
                    d4:73:cc:51:79
                ASN1 OID: prime256v1
        X509v3 extensions:
            X509v3 Key Usage: critical
                Certificate Sign
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Subject Key Identifier:
                D8:28:B4:C0:BC:92:4A:D3:C3:8C:54:6C:08:86:33:10:A6:8D:83:AE
            X509v3 Authority Key Identifier:
                keyid:C4:B3:FE:76:0D:E2:DE:3C:FC:75:FB:AE:55:86:04:F0:BB:7F:F6:01

            X509v3 Subject Alternative Name:
                DNS:Anils-MacBook-Pro.local
            1.2.3.4.5.6.7.8.1:
                {&amp;quot;attrs&amp;quot;:{&amp;quot;attr1&amp;quot;:&amp;quot;val1&amp;quot;}}
    Signature Algorithm: ecdsa-with-SHA256
        30:45:02:21:00:fb:84:a9:65:29:b2:f4:d3:bc:1a:8b:47:92:
        5e:41:27:2d:26:ec:f7💿aa:86:46:a4:ac:da:25:be:40:1d:
        c5:02:20:08:3f:49:86:58:a7:20:48:64:4c:30:1b:da:a9:a2:
        f2:b4:16:28:f6:fd:e1:46:dd:6b:f2:3f:2f:37:4a:4c:72
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果想使用前面描述的客户端身份库来提取或断言属性值，但是没有使用Hyperledger Fabric CA，那么必须确保由自己的外部CA颁发的证书包含上面所示表单的属性。特别是，证书必须包含1.2.3.4.5.6.7.8.1 X509v3扩展，其JSON值包含标识的属性名和值。&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;说了这么多，来句一个栗子：&lt;strong&gt;(注意在合约中引入相关的依赖，即cid库文件)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此链码库cid是用来进行链码操作权限的控制的，那么，这个attrs的name-value该如何获取呢，从上面的解释中可以看到跟CA有关，所以是在我们注册用户身份的时候进行设置的，下面列举使用Node sdk进行初始化设置attrs的例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;secret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ca&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;affiliation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org1.department1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;enrollmentID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cai&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;					&lt;span class=&#34;c1&#34;&gt;//在register的传入属性中有attrs这个参数，这是一个Array数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;						&lt;span class=&#34;c1&#34;&gt;//其中传入三个
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;usertype&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;//attrs的name，也就是key
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;storeshop&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//attrs的value，也就是key对应的值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;nx&#34;&gt;ecert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;//ecert为true表示默认情况下应将此属性包括在注册证书中(默认)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;adminIdentity&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面就是设置了attrs的name是usertype,value是storeshop&lt;/p&gt;
&lt;p&gt;在链码中我们这样写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//根据name获取用户的attr的值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//这里就是根据name--usertype来获取我们注册时设置的value，如果使用上面注册时的身份user进行调用就会获取到usertype对应的value是storeshop
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SmartContract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getAttr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;APIstub&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ChaincodeStubInterface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetAttributeValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;APIstub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;usertype&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  	 &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;未查询到属性值&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  	 &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;查询错误&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//类型断言 -----用来判断是否当前的操作用户的attr的key与value是否与这里指定的值匹配
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SmartContract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;AssertAttr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;APIstub&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ChaincodeStubInterface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;AssertAttributeValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;APIstub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;usertype&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;storeshop&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;类型不是storeshop&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;类型是storeshop&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/hyperledger-fabric-chincode%E5%BC%80%E5%8F%91/" term="Hyperledger Fabric--chincode开发" label="Hyperledger Fabric--chincode开发" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ccp文件的设置</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/fabricnodesdk/ccp-connection-file%E7%9A%84%E8%AE%BE%E7%BD%AE/" />
            <id>https://VegeBun-csj.github.io/posts/fabricnodesdk/ccp-connection-file%E7%9A%84%E8%AE%BE%E7%BD%AE/</id>
            <updated>2020-08-29T13:24:55&#43;08:00</updated>
            <published>2020-08-29T13:03:02&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1.实验环境时，我们使用cli容器来进行链码的部署，实例化，以及进行简单的交易操作，……</summary>
            
                <content type="html">&lt;blockquote&gt;
&lt;p&gt;1.实验环境时，我们使用cli容器来进行链码的部署，实例化，以及进行简单的交易操作，但是在Fabric进行开发时，为了避免命令行的繁琐行，采用fabric官方的SDK来进行开发， 尤其是进行链码的调用(我在自己的使用中都是使用cli进行链码的部署，实例化的，然后在cli中测试一下基本的链码功能是否正常，最后在SDK这头进行调用交易即可，不太喜欢SDK进行链码的部署这些，因为感觉是运维的做的事情哈哈哈，放在shell中一套命令安装完不香嘛，哈哈哈😄)&lt;/p&gt;
&lt;p&gt;2.在使用SDK之前需要一个配置文件，设置一些节点的证书，以及访问点，因为SDK毕竟最后是充当一个客户端来和网络进行交互的，就涉及到通过哪个peer节点与网络进行交互的问题，CCP文件就是做的这个事情(类似于一个user的登入点)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在使用node-sdk的high-level(fabric1.4.x版本开始升级的新的API，它的写法更加简洁，相比于1.4.x之前的版本的NodeSDK，进行了更进一步的封装，使得链码的调用更加方便)的API时，碰到了sdk中query时好时坏的问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;1问题描述sdk中使用的ccp文件中定义了所有的peer导致sdk端在扫描该文件时出现一会链接peer0org1一会链接peer1org1的问题&#34;&gt;1.问题描述：sdk中使用的CCP文件中定义了所有的peer，导致sdk端在扫描该文件时，出现一会链接peer0org1一会链接peer1org1的问题&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;first-network-org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;client&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;organization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;endorser&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;organizations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;mspid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Org1MSP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;peers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer1.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;certificateAuthorities&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;ca.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;peers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;grpcs://localhost:7051&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsCACerts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----\nMIICVzCCAf6gAwIBAgIRAOeRcny12K3xMMPY0BrYJEIwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjAwMzE1MDkxNDAwWhcNMzAwMzEzMDkx\nNDAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABMDyCkDy7DP80rm7L0w+OLFyCoN2irvBOU4jww2XLBpsU4+0o+nAgJqC\nCOL/rt/GHwmmX3ka2ioTWwtumtei4/ejbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQgRkvXAREOeeZzEzyAnb99rqWIzAW2RqFVriuhZoZSBpUwCgYIKoZIzj0E\nAwIDRwAwRAIgCcY4vir60ukkLNNHcQ9G22q1i2EsnFdOxH7VfdRASq8CIG2BL/7k\n98ewzous+ZiTv10pAQDdV4yvHY1w4OrTfDgP\n-----END CERTIFICATE-----\n&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;grpcOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;ssl-target-name-override&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostnameOverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer1.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;grpcs://localhost:8051&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsCACerts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----\nMIICVzCCAf6gAwIBAgIRAOeRcny12K3xMMPY0BrYJEIwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjAwMzE1MDkxNDAwWhcNMzAwMzEzMDkx\nNDAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABMDyCkDy7DP80rm7L0w+OLFyCoN2irvBOU4jww2XLBpsU4+0o+nAgJqC\nCOL/rt/GHwmmX3ka2ioTWwtumtei4/ejbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQgRkvXAREOeeZzEzyAnb99rqWIzAW2RqFVriuhZoZSBpUwCgYIKoZIzj0E\nAwIDRwAwRAIgCcY4vir60ukkLNNHcQ9G22q1i2EsnFdOxH7VfdRASq8CIG2BL/7k\n98ewzous+ZiTv10pAQDdV4yvHY1w4OrTfDgP\n-----END CERTIFICATE-----\n&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;grpcOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;ssl-target-name-override&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer1.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostnameOverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer1.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;certificateAuthorities&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ca.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://127.0.0.1:7054&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;caName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ca-org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsCACerts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----\nMIICUTCCAfegAwIBAgIQQCigCctKgodE1Q7gcR5LXDAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMS5leGFtcGxlLmNvbTAeFw0yMDAzMTUwOTE0MDBaFw0zMDAzMTMwOTE0MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nkhODBxDZsbsm+4roHRwjPhOavnvmGRNnktsKB1X9IncaDDu4jSduwjOu9zdZm/B4\nixe1pE/NhpjMhpXmYQBDk6NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCAS\nCZsC0MsmOf9PukUYg+mCYx0qZC3bIBiB4O2Y+ORVTzAKBggqhkjOPQQDAgNIADBF\nAiEAigmuFPeCY59LcV0KNU27y/v6Tgl3p8NlCBQv7vgXIigCID5vB6P+v9eQnQPj\nyn4alwVpNaO1qnAXZH+nekhnoTEs\n-----END CERTIFICATE-----\n&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;httpOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;verify&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;peer0org1安装了chaincode,但是peer1org1没有安装chaincode，所以当client端将peer1org1作为endpoint时就会报下面找不到链码的错误，原因就是没有指定好client端连接哪个peer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;2020-03-15T10:22:30.253Z - warn: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Query&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: evaluate: Query ID &lt;span class=&#34;s2&#34;&gt;&amp;#34;[object Object]&amp;#34;&lt;/span&gt; of peer &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer1.org1.example.com:8051&amp;#34;&lt;/span&gt; failed: &lt;span class=&#34;nv&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cannot retrieve package &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; chaincode emrscc/1.0, error open /var/hyperledger/production/chaincodes/emrscc.1.0: no such file or directory, &lt;span class=&#34;nv&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Error: cannot retrieve package &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; chaincode emrscc/1.0, error open /var/hyperledger/production/chaincodes/emrscc.1.0: no such file or directory
    at self._endorserClient.processProposal &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/home/songjian/go/src/github.com/hyperledger/fabric-samples/fabcar/javascript/node_modules/_fabric-client@1.4.7@fabric-client/lib/Peer.js:144:36&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    at Object.onReceiveStatus &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/home/songjian/go/src/github.com/hyperledger/fabric-samples/fabcar/javascript/node_modules/_grpc@1.23.3@grpc/src/client_interceptors.js:1207:9&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    at InterceptingListener._callNext &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/home/songjian/go/src/github.com/hyperledger/fabric-samples/fabcar/javascript/node_modules/_grpc@1.23.3@grpc/src/client_interceptors.js:568:42&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    at InterceptingListener.onReceiveStatus &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/home/songjian/go/src/github.com/hyperledger/fabric-samples/fabcar/javascript/node_modules/_grpc@1.23.3@grpc/src/client_interceptors.js:618:8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    at callback &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/home/songjian/go/src/github.com/hyperledger/fabric-samples/fabcar/javascript/node_modules/_grpc@1.23.3@grpc/src/client_interceptors.js:845:24&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;500, , &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;grpcs://localhost:8051, &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;peer1.org1.example.com:8051, grpc.max_receive_message_length&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-1, grpc.max_send_message_length&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-1, grpc.keepalive_time_ms&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;120000, grpc.http2.min_time_between_pings_ms&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;120000, grpc.keepalive_timeout_ms&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;20000, grpc.http2.max_pings_without_data&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0, grpc.keepalive_permit_without_calls&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1, &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;peer1.org1.example.com:8051, grpc.ssl_target_name_override&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;peer1.org1.example.com, grpc.default_authority&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;peer1.org1.example.com, &lt;span class=&#34;nv&#34;&gt;isProposalResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
Failed to evaluate transaction: Error: cannot retrieve package &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; chaincode emrscc/1.0, error open /var/hyperledger/production/chaincodes/emrscc.1.0: no such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;所以需要修改CCP文件（一开始是将原来的包含所有peer的CCP文件剔除掉一些peer，变成下面这样，但是还是报上面的错）原因就是没有关掉gateway.connect()时的discoveryOption参数中的enable,应该设置为false,不让其扫描本地。由于discovery service的原因，导致连接peer不确定，所以将discovery service关掉指定某个peer为访问点即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;first-network-org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;client&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;organization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;endorser&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;organizations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;mspid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Org1MSP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;peers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;certificateAuthorities&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;ca.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;peers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;grpcs://localhost:7051&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsCACerts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----\nMIICVzCCAf6gAwIBAgIRAOeRcny12K3xMMPY0BrYJEIwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjAwMzE1MDkxNDAwWhcNMzAwMzEzMDkx\nNDAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABMDyCkDy7DP80rm7L0w+OLFyCoN2irvBOU4jww2XLBpsU4+0o+nAgJqC\nCOL/rt/GHwmmX3ka2ioTWwtumtei4/ejbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQgRkvXAREOeeZzEzyAnb99rqWIzAW2RqFVriuhZoZSBpUwCgYIKoZIzj0E\nAwIDRwAwRAIgCcY4vir60ukkLNNHcQ9G22q1i2EsnFdOxH7VfdRASq8CIG2BL/7k\n98ewzous+ZiTv10pAQDdV4yvHY1w4OrTfDgP\n-----END CERTIFICATE-----\n&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;grpcOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;ssl-target-name-override&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostnameOverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;certificateAuthorities&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ca.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://127.0.0.1:7054&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;caName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ca-org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsCACerts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----\nMIICUTCCAfegAwIBAgIQQCigCctKgodE1Q7gcR5LXDAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMS5leGFtcGxlLmNvbTAeFw0yMDAzMTUwOTE0MDBaFw0zMDAzMTMwOTE0MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nkhODBxDZsbsm+4roHRwjPhOavnvmGRNnktsKB1X9IncaDDu4jSduwjOu9zdZm/B4\nixe1pE/NhpjMhpXmYQBDk6NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCAS\nCZsC0MsmOf9PukUYg+mCYx0qZC3bIBiB4O2Y+ORVTzAKBggqhkjOPQQDAgNIADBF\nAiEAigmuFPeCY59LcV0KNU27y/v6Tgl3p8NlCBQv7vgXIigCID5vB6P+v9eQnQPj\nyn4alwVpNaO1qnAXZH+nekhnoTEs\n-----END CERTIFICATE-----\n&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;httpOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;verify&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是又出现了新的错误，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;2020-03-15T10:52:10.058Z - error: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Network&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: _initializeInternalChannel: No peers defined in channel that have the ledger query role
Failed to evaluate transaction: Error: No peers defined in channel that have the ledger query role
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是因为CCP中没有设置channels的配置,并将discovery的enable置为false,这才大功告成！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我在实验过程中做过测试，只有query的操作采用false,但对于invoke操作是需要true的，这一点需要注意&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;first-network-org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;client&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;organization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;endorser&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;channels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;mychannel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;orderers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;orderer.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;peers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;organizations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;mspid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Org1MSP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;peers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;certificateAuthorities&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;ca.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;peers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;grpcs://localhost:7051&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsCACerts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----\nMIICVzCCAf6gAwIBAgIRAOeRcny12K3xMMPY0BrYJEIwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjAwMzE1MDkxNDAwWhcNMzAwMzEzMDkx\nNDAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABMDyCkDy7DP80rm7L0w+OLFyCoN2irvBOU4jww2XLBpsU4+0o+nAgJqC\nCOL/rt/GHwmmX3ka2ioTWwtumtei4/ejbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQgRkvXAREOeeZzEzyAnb99rqWIzAW2RqFVriuhZoZSBpUwCgYIKoZIzj0E\nAwIDRwAwRAIgCcY4vir60ukkLNNHcQ9G22q1i2EsnFdOxH7VfdRASq8CIG2BL/7k\n98ewzous+ZiTv10pAQDdV4yvHY1w4OrTfDgP\n-----END CERTIFICATE-----\n&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;grpcOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;ssl-target-name-override&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostnameOverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peer0.org1.example.com&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;certificateAuthorities&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ca.org1.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://127.0.0.1:7054&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;caName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ca-org1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsCACerts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----\nMIICUTCCAfegAwIBAgIQQCigCctKgodE1Q7gcR5LXDAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMS5leGFtcGxlLmNvbTAeFw0yMDAzMTUwOTE0MDBaFw0zMDAzMTMwOTE0MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nkhODBxDZsbsm+4roHRwjPhOavnvmGRNnktsKB1X9IncaDDu4jSduwjOu9zdZm/B4\nixe1pE/NhpjMhpXmYQBDk6NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCAS\nCZsC0MsmOf9PukUYg+mCYx0qZC3bIBiB4O2Y+ORVTzAKBggqhkjOPQQDAgNIADBF\nAiEAigmuFPeCY59LcV0KNU27y/v6Tgl3p8NlCBQv7vgXIigCID5vB6P+v9eQnQPj\nyn4alwVpNaO1qnAXZH+nekhnoTEs\n-----END CERTIFICATE-----\n&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;httpOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;verify&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;h4 id=&#34;2问题描述当我需要在org2的节点peer0上进行操作时由于我没有注册org2的admin和对应的user然后又在ccp文件中错误的赋值的org1peer1的配置所才出现了以下的错误&#34;&gt;2.问题描述：当我需要在org2的节点peer0上进行操作时，由于我没有注册org2的admin和对应的user，然后又在CCP文件中错误的赋值的org1peer1的配置,所才出现了以下的错误&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;2020-03-15T13:42:06.069Z - error: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Network&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: _initializeInternalChannel: No peers defined &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; MSP &lt;span class=&#34;s1&#34;&gt;&amp;#39;Org1MSP&amp;#39;&lt;/span&gt; to discover from
Failed to submit transaction: Error: No peers defined &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; MSP &lt;span class=&#34;s1&#34;&gt;&amp;#39;Org1MSP&amp;#39;&lt;/span&gt; to discover from
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：在切换了相应的endpoint（组织节点）时，一定要检查当前使用的client的user是哪个组织的用户，这对于和相应的peer节点的交互尤为重要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-------------------------------我是更新部分    -------------------------------2020年3月31日&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/hyperledger-fabric-nodesdk%E5%BC%80%E5%8F%91/" term="Hyperledger Fabric--NodeSDK开发" label="Hyperledger Fabric--NodeSDK开发" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">fabric1.4.x 网络部署的一些坑</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/fabric1.4.x%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/" />
            <id>https://VegeBun-csj.github.io/posts/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/fabric1.4.x%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</id>
            <updated>2020-08-29T13:04:52&#43;08:00</updated>
            <published>2020-08-28T17:18:13&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">下面的搭建主要是基于fabric1.4.x出现错误 1.创建通道出现错误(注意如果出现……</summary>
            
                <content type="html">&lt;h3 id=&#34;下面的搭建主要是基于fabric14x出现错误&#34;&gt;下面的搭建主要是基于fabric1.4.x出现错误&lt;/h3&gt;
&lt;h4 id=&#34;1创建通道出现错误注意如果出现重复创建通道建议去清理网络&#34;&gt;1.创建通道出现错误(注意如果出现重复创建通道建议去清理网络)&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;config update &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; existing channel did not pass initial checks: implicit policy evaluation failed - &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; sub-policies were satisfied, but this policy requires &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; of the &lt;span class=&#34;s1&#34;&gt;&amp;#39;Writers&amp;#39;&lt;/span&gt; sub-policies to be satisfied: permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里是将在创建orderer的创世区块的channelID删除  使用默认值   注意这个&lt;strong&gt;创世区块的channelID不能与下面的应用通道的channelID相同&lt;/strong&gt;，不然也会出现这个错误&lt;/p&gt;
&lt;h4 id=&#34;2创建通道的错误&#34;&gt;2.创建通道的错误&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Error: failed to create deliver client: orderer client failed to connect to orderer.example.com:7050: failed to create new connection: context deadline exceeded
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看docker ps  发现order没有启动后挂了&lt;/p&gt;
&lt;p&gt;查看一下orderer的日志&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;2020-03-20 09:31:03.652 UTC &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;orderer.common.server&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; extractSysChanLastConfig -&amp;gt; INFO &lt;span class=&#34;m&#34;&gt;003&lt;/span&gt; Not bootstrapping because of &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; existing channels
panic: runtime error: invalid memory address or nil pointer dereference
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;signal SIGSEGV: segmentation violation &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x1 &lt;span class=&#34;nv&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x10 &lt;span class=&#34;nv&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0xfa2509&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

goroutine &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;running&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:
github.com/hyperledger/fabric/protos/utils.GetMetadataFromBlock&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x0, 0x1, 0x0, 0x194, 0x2140990&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        /opt/gopath/src/github.com/hyperledger/fabric/protos/utils/blockutils.go:55 +0x39
github.com/hyperledger/fabric/protos/utils.GetLastConfigIndexFromBlock&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x0, 0xc0001566c0, 0xffffffffffffffff, 0x0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        /opt/gopath/src/github.com/hyperledger/fabric/protos/utils/blockutils.go:75 +0x37
github.com/hyperledger/fabric/orderer/common/multichannel.ConfigBlock&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x7fe3315d28d0, 0xc0001566c0, 0xc0001566c0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:112 +0x74
github.com/hyperledger/fabric/orderer/common/server.extractSysChanLastConfig&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x16c5420, 0xc000156320, 0xc0000c5fc0, 0x16c5420&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:222 +0x2cf
github.com/hyperledger/fabric/orderer/common/server.Start&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x15309fe, 0x5, 0xc000418900&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:110 +0x30a
github.com/hyperledger/fabric/orderer/common/server.Main&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:91 +0x208
main.main&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
        /opt/gopath/src/github.com/hyperledger/fabric/orderer/main.go:15 +0x20
songjian@fabric-1:~/go/src/github.com/hyperledger/MedRec/MedNet$ docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it Not bootstrapping because of &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; existing channels
Error: No such container: Not
songjian@fabric-1:~/go/src/github.com/hyperledger/MedRec/MedNet$ panic: runtime error: invalid memory address or nil pointer dereference
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;解决办法：重新配置order的docker的yaml文件中的volums映射 （20行错误显示因为已经存在3个通道，所以是通道残留，所以需要修改路径，或者删除你的本地路径中的文件）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  orderer.medrec.com:
    container_name: orderer.medrec.com
    extends:
      file: peer-base.yaml
      service: orderer-base
    volumes:
        - ../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../crypto-config/ordererOrganizations/medrec.com/orderers/orderer.medrec.com/msp:/var/hyperledger/orderer/msp
        - ../crypto-config/ordererOrganizations/medrec.com/orderers/orderer.medrec.com/tls/:/var/hyperledger/orderer/tls
        - orderer.medrec.com:/var/hyperledger/production/orderer
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在最后一行的映射，将本地映射重新换一个,我这里改成下面，重新部署即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ba&#34; data-lang=&#34;ba&#34;&gt;  - /var/hyperledger/order_data/orderer/chains/:/var/hyperledger/production/orderer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以出现这种错误，是做了账本的本地持久化，下次启动时会同步，如果不这样做，可以在每次启动的时候将本地的映射删除&lt;/p&gt;
&lt;h4 id=&#34;3peer加入通道错误&#34;&gt;3.peer加入通道错误&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Error: proposal failed &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;err: rpc error: &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Unknown &lt;span class=&#34;nv&#34;&gt;desc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; chaincode error &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;status: 500, message: Cannot create ledger from genesis block, due to LedgerID already exists&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;说明账本在本地已经存在，所以想一下，肯定是docker的yaml文件中做了本地地址的映射，所以每次启动容器时，上一次的账本同步到容器中去了，所以解决办法是，在启动网络是，不做创建通道和加入通道操作，或者，干脆不做本地与容器的映射。也就是将docker的yaml文件中的peer的volum删除&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;        - peer0.org1.medrec.com:/var/hyperledger/production
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;4.LOCALMSPID不匹配的错误&lt;/p&gt;
&lt;p&gt;（注意检查configtx.yaml文件和docker的yaml文件中的localMSPID是否一致，一定要匹配，不然可能出现无法加入通道或者无法更新锚节点的问题，两者只有一个能成功）&lt;/p&gt;
&lt;p&gt;4.创建应用通道时&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Error: got unexpected status: BAD_REQUEST -- initializing configtx manager failed: bad channel ID: channel ID &lt;span class=&#34;s1&#34;&gt;&amp;#39;channelPA&amp;#39;&lt;/span&gt; contains illegal characters
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;原因：通道名不能大写！！！&lt;/p&gt;
&lt;h4 id=&#34;5安装链码的时候出现路径不存在的错误这是一个需要特别注意的地方很容易出错&#34;&gt;5.安装链码的时候出现路径不存在的错误（这是一个需要特别注意的地方，很容易出错）&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Error: error getting chaincode code recordpa: path to chaincode does not exist: /opt/gopath/src/github.com/hyperledger/MedRec/chaincode/recordPA/go
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意：这种情况需要关注两个地方&lt;/p&gt;
&lt;p&gt;（1）如果是使用命令行，部署链码需要关注docker-compose的yaml文件中cli容器的volumes的设置，链码的安装，实例化都是走cli的方式安装的，比如，我的cli的配置是这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;volumes:
        - /var/run/:/host/var/run/
        - ./../chaincode/:/opt/gopath/src/github.com/chaincode
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;看一下chancode的路径设置，前面是本地的chaincode路径，后面是容器中的chaincde路径，这里的容器中的路径是后面设置的关键&lt;/p&gt;
&lt;p&gt;（2）关注一下我们安装链码的路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;	&lt;span class=&#34;nv&#34;&gt;InfoCC_SRC_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;github.com/chaincode/info
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意书写方式，这里的路径是相对于容器中gopath的路径，所以是从github.com开始写链码的路径，同时注意，该路径和本地的chaincode路径中链码位置是否一致！！！！&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/hyperledger-fabric-%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/" term="Hyperledger Fabric--网络部署" label="Hyperledger Fabric--网络部署" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">以太坊Ghost协议(5)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8Aghost%E5%8D%8F%E8%AE%AE5/" />
            <id>https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8Aghost%E5%8D%8F%E8%AE%AE5/</id>
            <updated>2020-08-24T21:56:46&#43;08:00</updated>
            <published>2020-08-24T21:52:57&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">在以太坊中，出块的时间相对于BTC来说是非常短暂的，只有十几秒，但是出块时间越短，出……</summary>
            
                <content type="html">&lt;p&gt;在以太坊中，出块的时间相对于BTC来说是非常短暂的，只有十几秒，但是出块时间越短，出现的短暂性分叉也就越多，这就会对部分节点，尤其是个体挖矿节点来说很不公平（因为一般个体节点竞争不过矿池，无法成为最终合法链，矿池会得到很多收益）&lt;/p&gt;
&lt;p&gt;所以在以太坊中为了解决这个问题，以太坊采用GHOST协议，给产生分叉得区块引入了一个新的称呼——&lt;strong&gt;叔父区块(uncle block)&lt;/strong&gt;,叔区块也可以获得奖励(&lt;strong&gt;uncle reward&lt;/strong&gt;)，这样有利于鼓励出现分叉之后及时合并。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://VegeBun-csj.github.io/image/ETH/uncleblock.png&#34; alt=&#34;叔区块&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是以上的这种方案还存在一点问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个区块只能包含两个叔父区块，其他没被包含的叔父区块就不会获得奖励，它们就不会乐意了&lt;/li&gt;
&lt;li&gt;也可能出现有的区块故意不包含一个叔父区块的情况(即两者之间存在恶意竞争关系的时候)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了解决这两个问题，ETH对GHOST协议进行了改造&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://VegeBun-csj.github.io/image/ETH/changedghost.png&#34; alt=&#34;改造的Ghost&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前区块认可的叔父区块最多只能和自己隔7代，也就是最多6个叔父区块有效，以太坊中不管和当前区块隔多少代都叫叔父区块，7代以前的叔父就不会再认可了，这就解决了第一个问题&lt;/li&gt;
&lt;li&gt;第二个问题解决方法是：即使当前区块不接受某个叔父区块，他后面的区块还是有可能接受这个叔父区块，所以恶意地不包含叔父区块变得不可行(通俗讲就是：对于后面的区块而言，这个钱你不赚，我来赚！！！)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对于当前区块来说，不管包含的是哪一代的叔父区块，所获得的奖励都是1/32个出块奖励&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在BTC中，矿工的奖励分为两个部分：block reward(静态奖励)和Tx fee(动态奖励)&lt;/li&gt;
&lt;li&gt;在ETH中，矿工的奖励分为两个部分：block reward(静态奖励)和gas fee(动态奖励)，叔父区块奖励是包含在block reward中的。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;ETH中并不像BTC中那样，通过减少出块奖励来实现BTC的稀缺性，并且只有分叉后的第一个叔父区块可以得到奖励，叔父区块后面的区块都不能得到奖励，这是为了防止forking attack,所以这也是鼓励分叉及时进行合并！！！&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/" term="以太坊" label="以太坊" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">以太坊交易树和收据树(4)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BA%A4%E6%98%93%E6%A0%91%E5%92%8C%E6%94%B6%E6%8D%AE%E6%A0%914/" />
            <id>https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BA%A4%E6%98%93%E6%A0%91%E5%92%8C%E6%94%B6%E6%8D%AE%E6%A0%914/</id>
            <updated>2020-08-24T21:53:07&#43;08:00</updated>
            <published>2020-08-24T21:51:47&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">交易树与状态树 状态树 交易树 收据树 (把系统中的所有状态都记录进去，不管账户是否与当前区……</summary>
            
                <content type="html">&lt;h3 id=&#34;交易树与状态树&#34;&gt;交易树与状态树&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态树&lt;/th&gt;
&lt;th&gt;交易树&lt;/th&gt;
&lt;th&gt;收据树&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(把系统中的所有状态都记录进去，不管账户是否与当前区块中的相关交易关联的账户是什么关系)&lt;/td&gt;
&lt;td&gt;区块产生时会生成(类似于BTC中的Merkle交易树，都是把区块中发布的交易组织起俩的)&lt;/td&gt;
&lt;td&gt;交易结束之后会形成一个收据，记录交易的相关信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MPT树&lt;/td&gt;
&lt;td&gt;MPT树(BTC中的交易树就是普通的Merkle树)&lt;/td&gt;
&lt;td&gt;MPT树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;便于查找(key：账户地址)&lt;/td&gt;
&lt;td&gt;便于查找(key：交易在区块中的编号)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多个区块的状态树是共享节点的&lt;/td&gt;
&lt;td&gt;不共享节点&lt;/td&gt;
&lt;td&gt;不共享节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交易树与收据树上的节点都是一一对应的。&lt;/li&gt;
&lt;li&gt;增加了收据树，是因为智能合约较为复杂，使用收据树可以继续一些更快速的查询交易的操作，以及一些查看交易结果信息。
&lt;ol&gt;
&lt;li&gt;首先收据树也可以提供&lt;strong&gt;Merkle证明&lt;/strong&gt;，证明某笔交易被打包至区块中了&lt;/li&gt;
&lt;li&gt;Ethereum引入了&lt;strong&gt;bloom filter&lt;/strong&gt;的数据结构，支持更加复杂的查询，支持确定某个元素是否在一个较大的集合中（但是有可能出现的问题是有可能本来并不在里面，但是会判断为在里面,也就是false positive），但是Bloom filter不支持删除元素，&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;状态树是共享节点的，只有发布在区块中的交易改变了账户的状态的那些节点需要更新一个分支，其他的节点都是沿用原来的状态树上的节点就行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个交易执行完成之后都会有一个收据，每个收据都会有一个bloom filter来记录交易的类型，地址等其他信息，发布的区块的块头中也有一个总的Bloom filter（是这个区块中交易列表的所有交易的bloom filter的并集），所以当需要查找过去十天，与某个智能合约相关的交易的时候，就去查看区块的块头的bloom filter，看是否包含相关交易的bloom filter，如果没有，就说明该区块不是我们想要查询的；如果有，那么就查找这个区块里面包含的交易所对应的收据树里面的bloom filter,&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/" term="以太坊" label="以太坊" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">以太坊状态树(3)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%8A%B6%E6%80%81%E6%A0%913/" />
            <id>https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%8A%B6%E6%80%81%E6%A0%913/</id>
            <updated>2020-08-24T21:51:20&#43;08:00</updated>
            <published>2020-08-24T21:50:16&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">在Ethereum中，账户的状态是以键值对&amp;lt;key,value&amp;gt;的形式保……</summary>
            
                <content type="html">&lt;p&gt;在Ethereum中，账户的状态是以键值对&amp;lt;key,value&amp;gt;的形式保存的，账户地址为key，账户的状态就是value，即&amp;lt;addr,state&amp;gt;，所以对于这种存储结构，很容易想到的就是hash_table来进行存储。&lt;/p&gt;
&lt;h4 id=&#34;如何用hash_table来进行merkle-proof呢&#34;&gt;如何用hash_table来进行Merkle proof呢&lt;/h4&gt;
&lt;p&gt;（1）一种方法就是将hash_table中的value组织成一个Merkle tree,然后将root hash 保存在block header中，但是这种方法的问题在于，每次发布一个交易产生状态变化时，又需要重新组建一个新的Merkle tree，这样带来的代价太大，所以用这种方式提供Merkle proof不可行
注；BTC中构建Merkle tree只有一次，就是在区块生成的时候构建的，一旦构建就无法篡改，它是不会变化的，只构建一次，代表交易顺序的共识&lt;/p&gt;
&lt;h5 id=&#34;merkle-tree的作用&#34;&gt;Merkle Tree的作用：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;提供Merkle proof（全节点提供部分分支给轻节点）&lt;/li&gt;
&lt;li&gt;维护账本的一致性（保证区块中的交易顺序和交易的共识）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）另一种提供方法是，不使用hash_table，直接使用Merkle tree，把账户的状态存储在叶节点中，但是这种方式查找和更新的效率并不高，另外一个问题就是这个状态的Merkle tree是否需要进行排序？&lt;/p&gt;
&lt;p&gt;账户的状态是保存在叶节点中的，如果不规定账户在叶节点中出现的顺序，那么构造出的Merkle tree就是不唯一的，但是状态是网络上每个节点都需要保存，各个节点按照自己保存的账户顺序构建Merkle tree ，导致Merkle root hash不同，他们就无法对账户状态达成共识，所以，如果采用直接构建Merkle tree来组织账户和状态的存储，那么对于树中的账户必须排序！！！&lt;/p&gt;
&lt;p&gt;（BTC中，要证明一笔交易包含在区块中是不用排序的，但是要证明一笔交易不在一个区块中是需要对交易进行排序的，也就是sorted Merkle tree）&lt;/p&gt;
&lt;p&gt;BTC中的Merkle树是不需要排序的，因为，最终的Merkle树的构造方式是由获得记账权（打包交易出块）的节点决定的，也就是说，在没出块之前，所有的节点都可以有自己根据交易构造Merkle tree的顺序，每个节点可能都不一样，过程中都是“百家争鸣”，但是最终的交易构造Merkle tree的顺序是由最终出块，并被追加到区块链上的哪个节点决定的，它出了块代表了最终的Merkle tree中的交易构造顺序。那么能否也用同样的方式，不对状态树中的账户进行排序，也采用由出块的节点进行选择呢？不行，因为这就导致在每次发布交易的时候都需要发布更新一次Merkle tree，ETH中是13秒一个块，这样大量造成重复的发布，代价很大（因为状态树是存储的网络中的所有账户状态的，相比于一个块中的交易而言，相差好几个数量级！！！，多次重复发布，代价太大），所以从这一点也验证了不排序不行！！！&lt;/p&gt;
&lt;p&gt;好的，那么如果用排序的Merkle tree行不行呢？同样的也有一种问题就是，如果由新账户怎么办？如果新增的账户在中间的叶子节点部分，就会导致树的变化太大，造成代价太大的问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-注释&#34; data-lang=&#34;注释&#34;&gt;关于区块中交易顺序（交易顺序实际上就是一种共识）：
BTC和ETH中都是以获得记账权的节点为标准的，他们发布的区块中的交易顺序是什么，最后大家共识的交易顺序就是什么？
fabric中是order节点进行排序的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ETH采用的是MPT树。&lt;/p&gt;
&lt;p&gt;未完待续----------------------------&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/" term="以太坊" label="以太坊" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">以太坊账户(2)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%B4%A6%E6%88%B72/" />
            <id>https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%B4%A6%E6%88%B72/</id>
            <updated>2020-08-24T21:48:07&#43;08:00</updated>
            <published>2020-08-24T21:46:36&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">背景 比特币中采用的是基于交易的账本，这种模式下，系统中并没有显式地记录账户中有多少钱……</summary>
            
                <content type="html">&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;p&gt;比特币中采用的是&lt;strong&gt;基于交易的账本&lt;/strong&gt;，这种模式下，系统中并&lt;strong&gt;没有显式地记录账户中有多少钱&lt;/strong&gt; ，只能根据UTXO中的信息来推算。这种方式的隐私性较好，但是使用比较别扭，使用体验不是特别好，花钱的时候需要说明币的来源；还有就是每次花费比特币（一笔交易的输入必须将该输入来源的BTC全部花出去），然后多余的币转到另一个自己的地址。这就很麻烦！！！&lt;/p&gt;
&lt;h3 id=&#34;以太坊账户&#34;&gt;以太坊账户&lt;/h3&gt;
&lt;p&gt;以太坊采用的是&lt;strong&gt;基于账户的账本（account-based ledger）&lt;/strong&gt; ，它&lt;strong&gt;有显式的余额的概念&lt;/strong&gt;，所以当进行交易转账的时候，只需要检查转出账户中是否有足够多的币，而无需说明转出的币具体来源于哪里。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-这种基于账户的账本模型有什么好处？&#34; data-lang=&#34;这种基于账户的账本模型有什么好处？&#34;&gt;回想一下，为什么比特币要说明币的来源，因为要防范double spending，而以太坊这种基于账户的账本模式，有天然的防范double spending的作用。（花几次钱，扣几次钱，看账户有多少钱就行）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;这种账户的模式会不会有人发布交易修改自己的余额？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答案是否定的，因为你发布交易的时候不需要说明你的账户余额，它是由系统中全节点维护的状态保存的。这是以太坊中一个重要的数据结构：状态树（即所有的账户的状态组成的一棵树，账户状态里包含的一个重要的域就是balance，也就是你的余额，这也余额没有办法篡改，如果你要改这个余额，必须是所有的全节点都认为你的余额发生了变化，否则其他节点是不认可的）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种账户的模式防范了双花攻击，是不是就没什么缺点了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;账户模式的账本，虽然能够天然防范double spending attack，但是会受到 replay attack（重放攻击）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是重放攻击？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如A转给B，10个以太币，A发布一个交易给网络，过段时间之后，A发布的交易被写入区块中，A会觉得这个转账交易已经完成了；如果B是恶意的节点，它此时又把A转给B，10个以太币者交易又在网上重新广播了一遍，其他节点一看又觉得A向B转账，所以又扣了一次A的钱，这样就扣了两次A的钱。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重放攻击和双花攻击其实是对称类似的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;双花攻击其实是转账的人不诚实，他想花两次钱；重放攻击是收钱的人不老实，他想收两次钱。&lt;/p&gt;
&lt;p&gt;比特币中没有出现重放攻击是因为，如果一旦出现重返攻击，就会出现双花攻击，所以显然是不行的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以太坊中如何防范重放攻击？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;加一个&lt;strong&gt;计数器（nonce），即交易次数&lt;/strong&gt;，记录这个账户有史以来进行过多少次交易，然后转账的时候，这个交易次数要成为这个交易转账的一部分，一起包含进去，都是收到发布交易者签名保护的，其他人如果要伪造交易次数是没有签名的。所以系统中全节点维护的&lt;strong&gt;状态树，不光要维护账户的状态，还要维护nonce的值&lt;/strong&gt;（账户创建的时候nonce的值是0，每次进行一次交易，nonce+1，全节点同时更新状态树中的nonce，以后如果有人重放交易，全节点检查状态树的nonce，如果已经执行过了，即nonce相同，就不会执行重放的交易）&lt;/p&gt;
&lt;h1 id=&#34;账户的分类&#34;&gt;账户的分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;外部账户external-owned-account公私钥控制&#34;&gt;外部账户(external owned account)：公私钥控制&lt;/h4&gt;
&lt;p&gt;一个外部账户的状态包括：balance(余额)，nonce(计数)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;合约账户smart-contract-account&#34;&gt;合约账户(smart contract account)：&lt;/h4&gt;
&lt;p&gt;一个合约可以调用另外一个合约，所以&lt;strong&gt;合约要也有nonce值记录一下合约调用的次数&lt;/strong&gt;，但是**合约账户不能主动发起一个交易，所有的交易只能由外部账户发起。**外部账户发起一个交易，如果调用了一个合约账户，这个合约账户可以发送一个message，调用另外一个合约。&lt;/p&gt;
&lt;p&gt;一个合约账户包含：code（代码），storage（相关存储状态，包括每个变量的取值）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;BTC是基于UTXO的数据模型&lt;/p&gt;
&lt;p&gt;ETH是基于账户的数据模型&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/" term="以太坊" label="以太坊" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">以太坊概述(1)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%A6%82%E8%BF%B01/" />
            <id>https://VegeBun-csj.github.io/posts/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%A6%82%E8%BF%B01/</id>
            <updated>2020-08-24T21:58:46&#43;08:00</updated>
            <published>2020-08-24T21:40:38&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">以太坊被称为区块链2.0 创世人是V神，属于公有链的代表，和BTC的不同是，以太坊引入……</summary>
            
                <content type="html">&lt;h3 id=&#34;以太坊被称为区块链20&#34;&gt;以太坊被称为区块链2.0&lt;/h3&gt;
&lt;p&gt;创世人是V神，属于公有链的代表，和BTC的不同是，以太坊引入了智能合约，可以进行复杂的业务设计，不仅仅局限于解决payment&lt;/p&gt;
&lt;h3 id=&#34;关于mining-puzzle&#34;&gt;关于mining puzzle&lt;/h3&gt;
&lt;p&gt;1.BTC中采用的是计算密集型的，只靠算力，有点违背了去中心化原则，&lt;/p&gt;
&lt;p&gt;以太坊中不仅要求计算，&lt;strong&gt;还规定了内存&lt;/strong&gt;，是用来反对ASCI芯片挖矿的(&lt;strong&gt;ASCI resistence&lt;/strong&gt;)。&lt;/p&gt;
&lt;p&gt;BTC中的挖矿有专门的ASIC芯片来进行，这违背了BTC的设计初衷，所以在ETH中，就抵制ASIC芯片（ASIC resistance），因为ASIC芯片只能进行大量的并行计算，在存储方面远远不行，所以ETH中就增加挖矿时的内存要求，早期进行比较好的mining puzzle是lite coin(莱特币)，它使用的是Scrypt这种对内存有要求hash函数，他要求使用的内存要128k,但是因为这个内存的要求并不是特别大，所以现在还是有ASCI矿机。&lt;/p&gt;
&lt;p&gt;EHT中要求有两个数据集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;16M的Cache（轻节点只需要保存这个Cache）&lt;/li&gt;
&lt;li&gt;1G的dataset，DAG（挖矿的矿工需要保存这个dataset）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.以太坊以后会要将&lt;strong&gt;Proof of work(pow) 改成 proof of stake(pos)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.增加了Smart Contract（智能合约）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;BTC（比特币）&lt;/th&gt;
&lt;th&gt;ETH（以太坊）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;货币&lt;/td&gt;
&lt;td&gt;BTC&lt;/td&gt;
&lt;td&gt;Ether&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计量单位&lt;/td&gt;
&lt;td&gt;Sotashi（聪）&lt;/td&gt;
&lt;td&gt;Wei&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;decentralized currency（去中心化货币）&lt;/td&gt;
&lt;td&gt;decentralized contract（去中心化合约）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;去中心化货币与法币相比：更容易进行跨国转账&lt;/p&gt;
&lt;p&gt;去中心化合同：保证合同的参与方从一开始就不能违约，一旦合约发布，这个代码将不能改变&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/" term="以太坊" label="以太坊" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Git的基本使用</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/git/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" />
            <id>https://VegeBun-csj.github.io/posts/git/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-08-23T21:12:12&#43;08:00</updated>
            <published>2020-08-23T20:57:28&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Git的基本使用 新项目提交至github 1 2 3 4 5 6 7 8 9 10 git init //创建本地仓库 git add……</summary>
            
                <content type="html">&lt;h2 id=&#34;git的基本使用&#34;&gt;Git的基本使用&lt;/h2&gt;
&lt;h4 id=&#34;新项目提交至github&#34;&gt;新项目提交至github&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git init    //创建本地仓库
git add .   //提交全部
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;提交时的注释，尽量写，方便以后可以查看&amp;#34;&lt;/span&gt;

//添加仓库源
git remote add origin https://github.com//yourusername//yourrepository.git 
//这一步必须要写，不然后面会出现错误
git pull origin master
//将本地仓库推至远程github
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;项目改动之后再次提交&#34;&gt;项目改动之后再次提交&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -A	//将修改过的部分添加至本地仓库
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxxxxxxx&amp;#34;&lt;/span&gt;
git remote add origin https://github.com//yourusername//yourrepository.git 
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;常用的git的命令&#34;&gt;常用的git的命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果git add 错了文件，如何撤回&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git reset .       //撤回所有
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;查看当前的远程仓库源（remote origin）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/git/" term="Git" label="Git" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/git/" term="git" label="git" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—思考(11)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E6%80%9D%E8%80%8311/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E6%80%9D%E8%80%8311/</id>
            <updated>2020-08-23T20:23:07&#43;08:00</updated>
            <published>2020-08-23T20:20:45&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Hash 指针 比特币中的hash指针有两个作用：（1）区块之间的链接（2）交易时说明币的来源……</summary>
            
                <content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;hash-指针&#34;&gt;Hash 指针&lt;/h3&gt;
&lt;p&gt;比特币中的hash指针有两个作用：（1）区块之间的链接（2）交易时说明币的来源&lt;/p&gt;
&lt;p&gt;1.指针保存的是本地内存的地址，只在本地这台计算机才有意义，发送到其他的计算机上就没有意义，那么再发布区块时，hash指针是如何通过网络进行传输的呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所谓的hash指针只是一种形象的说法，实际系统在使用的时候，只有hash，没有指针，或者可以理解为hash值本身就是一个指针！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.如何找到前一个区块的内容呢？&lt;/p&gt;
&lt;p&gt;全节点一般是把这些区块存储在一个&amp;lt;key,value&amp;gt;数据库中，key是区块的hash，value是区块的内容，一个常用的kv数据库是levelDB，所以，如过拿到了最后一个区块的区块hash（key），那么就可以通过kv数据库查找到对应的区块内容（value），而该value中有上一个区块的hash，这样又能查找到上一个区块的内容，以此类推，一步一步往前找，可以把整个区块链找到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;区块恋&#34;&gt;区块恋&lt;/h3&gt;
&lt;p&gt;多余多个人的共享账户，一定不要用共享私钥的方法，因为BTC的密钥安全性是与密钥的长度挂钩的，BTC的私钥长度为256位，如果截断，那么，破解的难度会降低，会有很大的安全风险。&lt;/p&gt;
&lt;p&gt;如何解决呢？？？？&lt;/p&gt;
&lt;p&gt;可以使用&lt;strong&gt;多重签名&lt;/strong&gt;（多重签名中每个私钥都是独立产生的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;比特币稀疏性&#34;&gt;比特币稀疏性&lt;/h3&gt;
&lt;p&gt;BTC的总量一定，流通性有障碍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;量子计算&#34;&gt;量子计算&lt;/h3&gt;
&lt;p&gt;BTC的地址是公钥取hash，所以对安全性来说有很大提升。hash函数是不可逆的，量子计算机也没办法做到。BTC中使用SHA-256算法。如果只是收款，只需要提供公钥的hash就行，只有将来需要取钱的时候得有公钥还有私钥产生的签名。所以取钱的时候尽量一次性取出来，这样有利于安全性（即使是公钥也不要随便暴露，如果你担心量子计算机的话！！！！）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—匿名性(10)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E5%8C%BF%E5%90%8D%E6%80%A710/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E5%8C%BF%E5%90%8D%E6%80%A710/</id>
            <updated>2020-08-23T20:20:18&#43;08:00</updated>
            <published>2020-08-23T20:19:54&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">BTC的匿名性 在BTC中，账户的地址用的是公钥的hash，当然BTC也不是没有账户名……</summary>
            
                <content type="html">&lt;h3 id=&#34;btc的匿名性&#34;&gt;BTC的匿名性&lt;/h3&gt;
&lt;p&gt;在BTC中，账户的地址用的是公钥的hash，当然BTC也不是没有账户名的，可以使用化名（类似于网名）&lt;/p&gt;
&lt;p&gt;有的人可能会为了匿名性使用多个账户来进行转账交易，从而保证自己的隐秘性，但是BTC如果这样，匿名性可能会被弱化。&lt;/p&gt;
&lt;p&gt;（1）当多个账户出现转账交易是，产生产生多个Outputs，但是这些Outputs会被关联起来，从而找到某个确定的账户。&lt;/p&gt;
&lt;p&gt;（2）如果被找到的账户一旦与实体世界发生关联，其真实身份就会被暴露，因为在实际中可以通过交易发生的事件去BTC网络上查看，在这个时间附近发生的某些交易， 从而推算出是哪个账户或者某个确定的人。&lt;/p&gt;
&lt;p&gt;所以BTC的安全性并没有那么好，只要你花了BTC-coin，匿名性就不能得到保证，而且，匿名性也是相对的，对谁匿名也是匿名性的衡量标准（ 比如对警察局和对普通人）&lt;/p&gt;
&lt;p&gt;当然，也可以通过coin mixing（多币种混淆）的方式进行匿名。&lt;/p&gt;
&lt;p&gt;区块链是不可篡改的，但是对于隐私保护来说，是灾难性的，因为一旦某个交易暴露了一个人的身份信息，同时这笔交易会永久保存在链上。&lt;/p&gt;
&lt;h3 id=&#34;同态隐藏&#34;&gt;同态隐藏&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;若x!=y，那么存在加密函数使得E(x)!=E(y) (也就是说，如果E(x)=E(y)，那么x=y)&lt;/p&gt;
&lt;p&gt;注意：加密函数与hash函数不同，哈希算法是将目标文本转换成具有&lt;strong&gt;相同长度的、不可逆的杂凑字符串&lt;/strong&gt;（或叫做消息摘要），而加密（Encrypt）是将目标文本转换成具有&lt;strong&gt;不同长度的、可逆的密文。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定E(x)的值，无法推算出x的值 （即hiding property,这点与hash函数相同）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定E(x)和E(y)&lt;/p&gt;
&lt;p&gt;​	---同态加法：通过E(x)和E(y)，可以计算出E(x+y)&lt;/p&gt;
&lt;p&gt;​	---同台乘法：通过E(x)和E(y)，可以计算出E(xy)&lt;/p&gt;
&lt;p&gt;​	---扩展到多项式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;零知识证明&#34;&gt;零知识证明&lt;/h3&gt;
&lt;p&gt;指一方（证明者）向另一方（验证者）证明一个陈述时是正确的，而无需透露除了该陈述是正确的之外的其他任何信息。&lt;/p&gt;
&lt;p&gt;例子：Alice向Bob证明，她知道一组数 x+y = 7,同时不让Bob知道x和y的具体值，该怎么办？&lt;/p&gt;
&lt;p&gt;（1）Alice只需要向Bib提供E(x)和E(y)		（利用同态隐藏第二个性质）&lt;/p&gt;
&lt;p&gt;（2）Bob可以通过同态加法，运算得到E(x+y)			（利用与同态隐藏第三个性质）&lt;/p&gt;
&lt;p&gt;（3）Bob再计算出E(7)的值，如果E(x+y) = E(7),那么就证明，Alice知道x和y的值	（利用同态隐藏第一个性质）&lt;/p&gt;
&lt;h3 id=&#34;盲签名&#34;&gt;盲签名&lt;/h3&gt;
&lt;p&gt;在不知道具体内容的情况下，对其进行签名&lt;/p&gt;
&lt;p&gt;（1）用户A需要转账，并提供序列码(serial num)，银行在不知道serial num的情况下对其进行签名， 并将该签名token返回给A，并减少A的存款&lt;/p&gt;
&lt;p&gt;（2）用户A把已经被签名过的serial num和Token交给B完成交易（B知道serial num）&lt;/p&gt;
&lt;p&gt;（3）用户B拿着serial num和Token给银行进行验证，银行验证通过，增加B的存款。&lt;/p&gt;
&lt;p&gt;（4）银行无法通过上述的而过程将A推测出来，即使它是中心化的机构（这样A的消费被隐藏）&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—问答(9)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E9%97%AE%E7%AD%949/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E9%97%AE%E7%AD%949/</id>
            <updated>2020-08-23T20:19:43&#43;08:00</updated>
            <published>2020-08-23T20:19:32&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1.转账时，如果接收者不在线怎么办？ 转账时无需接受者在线，转账只是在账本上记账，无需……</summary>
            
                <content type="html">&lt;p&gt;1.转账时，如果接收者不在线怎么办？&lt;/p&gt;
&lt;p&gt;转账时无需接受者在线，转账只是在账本上记账，无需实时在线，而且记账可以由网络的矿工进行&lt;/p&gt;
&lt;p&gt;2.假设一个节点收到一个交易，有没有可能转账的tx中接收者的收款地址时节点以前从未听说的？&lt;/p&gt;
&lt;p&gt;是有可能的，因为创建一个比特币的账户是非常容易的，只需要产生一个公私钥对即可，而且创建账户时无需通知其他节点，只有在以后该账户作为收款地址，第一次收到钱时，其他节点才知道这个账户。&lt;/p&gt;
&lt;p&gt;3.如果账户的私钥丢失怎么办？&lt;/p&gt;
&lt;p&gt;没有任何办法，账户上的钱会变成死钱，永远也取不出来了，BTC不提供类似于银行的类似于重置密码的功能。&lt;/p&gt;
&lt;p&gt;4.如果转账的地址写错了，怎么办？&lt;/p&gt;
&lt;p&gt;没有任何办法，BTC无法取消一个已经发布的交易，一旦发布被打包进区块，写入最长合法链，就无法取消咯！！！唯一的办法就是让对方再转给你，而且这个也是不可强求的，可以私下解决。&lt;/p&gt;
&lt;p&gt;5.BTC中每个矿工都会寻找符合难度要求的nounce，如果一个矿工找到了nounce，并把这个区块发布到网络中，有没有可能，其他矿工收到该区块后，得到其中的nounce后，把区块中的地址改为自己的地址，偷走这个nounce答案？&lt;/p&gt;
&lt;p&gt;是不可能的，如果A挖出了一个矿，那么区块中就有了A的地址，如果某个矿工B要偷答案（nounce），那么B就需要将这个地址改为自己的，如果这个，那么coinbase tx就会发生改变（铸币交易是用来奖励挖出区块的矿工的，它的输出就是该矿工的地址，也就是将出块奖励打到该矿工的账户地址上），而coinbase tx是作为Merkle tree的一部分的，那么Merkle tree root hash就会发生改变，从而就会导致该nounce不符合难度目标预值，这个nounce也就作废了，所以是不可能偷走nounce（别人的劳动成果！！！）&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—分叉(8)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E5%88%86%E5%8F%898/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E5%88%86%E5%8F%898/</id>
            <updated>2020-08-23T20:50:44&#43;08:00</updated>
            <published>2020-08-23T20:10:23&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">BTC分叉(fork) 1.在挖矿时。如果两个peer几乎同时出了一个块，那就会出现一……</summary>
            
                <content type="html">&lt;h1 id=&#34;btc分叉fork&#34;&gt;BTC分叉(fork)&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-什么是分叉？何时出现分叉&#34; data-lang=&#34;什么是分叉？何时出现分叉&#34;&gt;1.在挖矿时。如果两个peer几乎同时出了一个块，那就会出现一个暂时性的fork，这种fork成为state fork,它是在网络中自然发生的，是不可避免的一种分叉，当然之前说的forking attack也是属于这种state fork，只不过分叉攻击是人为的恶意分叉
2.当比特币的协议发生改变时，也会造成分叉，这种分叉称为protocal fork(协议分叉)
（根据协议修改内容的不同，分叉又分为硬分叉和软分叉）
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;分叉的分类&#34;&gt;分叉的分类&lt;/h1&gt;
&lt;h3 id=&#34;hard-fork硬分叉&#34;&gt;Hard fork（硬分叉）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;当比特币中增加了某些新特性，一些节点没有升级更新新特性（旧区块），当BTC系统继续运行并产生新的区块时，旧节点就不会认可这些新节点产生的区块，这样，旧节点和新节点产生的区块就产生了分叉&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块的大小限制发生改变（Block size limit）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于比特币当前的区块大小限制为1M，如果粗略的来算，1M就为1000000bit，一笔交易的大小大约为250bit，所以算下来1000000bit/250bit= 4000笔交易/区块，又因为每10min产生一个区块（4000笔交易），所以每秒大约4000/60 = 7笔交易，所以这个交易量是非常小的。&lt;/p&gt;
&lt;p&gt;所以就有人提议将区块大小改为4M，从而提高交易量，此处假设网络中的绝大部分算力的节点更新了这个特性&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://VegeBun-csj.github.io/image/BTC/hardforking.png&#34; alt=&#34;硬分叉&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以从图上看出来在Block3后面出现了分叉，此时旧节点是按照小区块记账，新节点按照大区快记账，但是&lt;strong&gt;旧节点并不认可大区块，新节点认可小区块&lt;/strong&gt;（因为只要不超过4M，新节点都认可），所以会出现Block5小区块在Block_4后面（&lt;strong&gt;因为新节点是绝大部分的算力，所以记账会由掌握绝大部分算力的新节点进行，所以在分叉的小区块后面不会出现小区块，而是会被新节点进行分叉，追加大区块，因为他们掌握了绝大部分的算力&lt;/strong&gt;），然后大区块Block_6在小区块Block5后面又会产生分叉，所以只要网络中有节点不更新新特性，就会产生这样永久性的断断续续的分叉（因为对于小区块而言，新旧节点都认可），即大区块中含有小区块的情况！！！（途中的黄色线是最长合法链）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;历史上，出现的经典的硬分叉的例子就是以太坊的The DAO事件，为了解决这个黑客攻击事件，以太坊不得不硬分叉，也就形成了现在的ETH和ETC（以太坊经典）并存的局面，ETC曾经是原来最纯正血统的以太坊，如今两个链分家，并且拥有自己的币！！！&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;soft-fork软分叉&#34;&gt;Soft fork（软分叉）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;区块的大小限制发生改变（Block size limit）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果把区块的大小由1M改为0.5M，此时没有更新的节点（旧节点）仍然会打包1M大小的区块，而新节点会打包0.5M的区块，但是旧节点会认可新节点的区块，因为新节点的区块没有超过1M，所以掌握绝大部分的算力的新节点节点（假设绝大部分算力的节点更新了特性）会对小区块记账，同时旧节点也认可小区块，所以大家都会在小区块后面记账（&lt;strong&gt;第一个分叉&lt;/strong&gt;），但是如果旧节点继续出大区块，那么依然会在大区块前面的这个小区块上面发生分叉，链上仍然会被小区块占领（&lt;strong&gt;第二个分叉&lt;/strong&gt;，红色箭头是表示无效的追加区块），即分叉后的链上不会存在大区块，只要小区块，如果旧节点长时间不升级，就会导致自己挖矿的努力白费，频繁被分叉，会过的很难受。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://VegeBun-csj.github.io/image/BTC/softforking.png&#34; alt=&#34;软分叉&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以，根据上面的两个例子，可以看出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬分叉：必须半数以上算力的节点由新特性之后才不会出现永久性分叉&lt;/li&gt;
&lt;li&gt;软分叉：只要系统中有半数的算力更新新特性，就不会出现永久性的分叉&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如何简单地来区分硬分叉还是软分叉：只要是旧节点不接受新区块就会产生硬分叉，只要是旧节点可以接受新区块就不会产生硬分叉（软分叉）&lt;/p&gt;
&lt;p&gt;2016年的以太坊的The DAO事件就是硬分叉的典型例子，一开始通过软分叉来解决问题，但是攻击者通过某些指令不消耗gas，大量发起交易进行攻击，导致矿工资源消耗严重，迫使矿工降为旧版本，从而使这一方案以失败告终，最终以太坊社区不得不采取硬分叉的方式，使得曾经的ETH分裂为ETH和ETC(以太坊经典classic，实际上ETC是根正苗红的ETH)，现在的ETH是分叉后回滚交易的ETH。（以太坊由此分为了两派，支持回滚交易的一派也就是现在的ETH，不支持回滚交易的一派是ETC，似乎也是两种不同思想的人的追求，支持ETC没有进行硬分叉的人坚持这种去“中心化的思想”）&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—脚本(7)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E8%84%9A%E6%9C%AC7/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E8%84%9A%E6%9C%AC7/</id>
            <updated>2020-08-23T20:10:09&#43;08:00</updated>
            <published>2020-08-23T20:09:50&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">比特币的交易 交易结构 实际中为了安全起见脚本都是单独执行的！！！ 输入输出脚本的形式 （1……</summary>
            
                <content type="html">&lt;h1 id=&#34;比特币的交易&#34;&gt;比特币的交易&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728192656381.png&#34; alt=&#34;image-20200728192656381&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;交易结构&#34;&gt;交易结构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728193228573.png&#34; alt=&#34;image-20200728193228573&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728193557698.png&#34; alt=&#34;image-20200728193557698&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728194144832.png&#34; alt=&#34;image-20200728194144832&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728194802246.png&#34; alt=&#34;image-20200728194802246&#34;&gt;&lt;/p&gt;
&lt;p&gt;实际中为了安全起见脚本都是单独执行的！！！&lt;/p&gt;
&lt;h1 id=&#34;输入输出脚本的形式&#34;&gt;输入输出脚本的形式&lt;/h1&gt;
&lt;h3 id=&#34;1p2pk最简单&#34;&gt;（1）P2PK(最简单):&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;D:%5C%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99%5Cstudy_notes%5C%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E2%80%94%E2%80%94%E5%8C%97%E5%A4%A7%E8%82%96%E8%87%BB%5Cp2pk.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801172815056.png&#34; alt=&#34;image-20200801172815056&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上往下一次入栈，CHRECKSIG是将前两个入栈的弹出，如果正确就返回TRUE,说明验证通过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801173158962.png&#34; alt=&#34;image-20200801173158962&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2p2pkh最常用的&#34;&gt;（2）P2PKH(最常用的)：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;D:%5C%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99%5Cstudy_notes%5C%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E2%80%94%E2%80%94%E5%8C%97%E5%A4%A7%E8%82%96%E8%87%BB%5Cp2pkh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个与P2PK的不同在于，输出脚本中并没有给出公钥，而是给出的公钥的hash，公钥放在了输入脚本中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801173930129.png&#34; alt=&#34;image-20200801173930129&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行细节如下：（注意：&lt;strong&gt;前两个脚本是输入脚本，后面的脚本是输出脚本&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801174548528.png&#34; alt=&#34;image-20200801174548528&#34;&gt;&lt;/p&gt;
&lt;p&gt;上述7个脚本从上往下依次执行， 首先1和2脚本入栈，然后DUP的作用是复制一份PubKey然后压栈，HASH160作用是将栈顶的PubKey取hash，然后压栈，第五个脚本是将公钥的hash（收款人公钥的hash）入栈，第5个脚本是对栈顶的两个PubKeyHash进行判断，如果两个Hash值相等，那么这两个Hash值就消失了（&lt;strong&gt;目的是防止有人冒名顶替，用他自己的公钥冒充收款人的公钥&lt;/strong&gt;），然后执行最后一步，用公钥来判断签名，是否正确，如果正确就返回TRUE。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801175758383.png&#34; alt=&#34;image-20200801175758383&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3p2sh&#34;&gt;（3）P2SH:&lt;/h3&gt;
&lt;p&gt;输出脚本给出的不是收款人公钥的hash，而是&lt;strong&gt;收款人提供的脚本(redeem script)的hash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801180437621.png&#34; alt=&#34;image-20200801180437621&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801180637566.png&#34; alt=&#34;image-20200801180637566&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801180733938.png&#34; alt=&#34;image-20200801180733938&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801181050100.png&#34; alt=&#34;image-20200801181050100&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行的详细过程如下：（最上面两个是输入脚本，下面的都是输出脚本的内容）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801181417735.png&#34; alt=&#34;image-20200801181417735&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先执行最上面两个脚本，先入栈，然后HASH160，对栈顶脚本取hash，压栈，第四步就是将收款人给出的赎回脚本压栈，然后执行EQUAL操作，比较两个hash是否相等，如果不相等就结束，如果相等就消失，最后剩下Sig签名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801181907620.png&#34; alt=&#34;image-20200801181907620&#34;&gt;&lt;/p&gt;
&lt;p&gt;在第一阶段的基础上，执行赎回脚本（redeem script），也就是将公钥的hash入栈，然后执行CHECKS，使用公钥来验证签名，正确无误就返回TRUE。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801182230825.png&#34; alt=&#34;image-20200801182230825&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;为什么要用p2sh&#34;&gt;为什么要用P2SH?&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801183241108.png&#34; alt=&#34;image-20200801183241108&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801183341826.png&#34; alt=&#34;image-20200801183341826&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后执行CHECKMULTISIG验证栈中是不是含有三个签名中的两个，如果是，那么验证通过。&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;这个过程中并没有用到Hash，就是用原生的多重签名实现的。但是这也带来了复杂性，带来了不方便&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如：某个用户取网上购物，某个电商使用多重签名，要求必须要有5个合伙人中的三个人进行签名才能把钱取出来，这就要求购物的用户在进行网上购物时，给出这5个合伙人的公钥，同时还要给出N和M（分别代表几个公钥中至少有几个公钥才能合法，例如N=5,M=3代表5个合伙人中必须三个人进行签名，电商需要在网上公布出来，用户可以看到然后在进行转账交易的时候，就把这些信息填进去，不同的电商采用的多重签名的规则是不一样的，即N和M不一样，这就给用户生成转账交易带来不方便的地方，因为这些复杂性都暴露给用户了）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以就需用P2SH实现多重签名（本质是把复杂度从输出脚本转移到了输入脚本）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801192559444.png&#34; alt=&#34;image-20200801192559444&#34;&gt;&lt;/p&gt;
&lt;p&gt;输出脚本中只需要提供赎回脚本的hash，输入脚本中需要提供赎回脚本(其中包含N和公钥和N与M的值)，这个赎回脚本是由收款人提供的（前面提到的）&lt;/p&gt;
&lt;p&gt;再回到前面的例子：收款人是电商，他只要在网上公布赎回脚本的hash值,然后用户生成转账交易的时候，只需要把这个赎回脚本的hash值包含在交易的输出脚本中即可，至于这个电商用什么样的多重签名规则，对于用户来说是不可见的，用户没必要知道。采用这种方式与之前说的P2PKH没有什么区别（只不过把公钥的hash值改成了赎回脚本的hash值）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801193332388.png&#34; alt=&#34;image-20200801193332388&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801193750202.png&#34; alt=&#34;image-20200801193750202&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上是执行的第一阶段，然后进行第二阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801193840212.png&#34; alt=&#34;image-20200801193840212&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后验证多重签名的有效性，正确返回TRUE。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801194050454.png&#34; alt=&#34;image-20200801194050454&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在的多重签名基本都是采用的这种P2SH的形式&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;4proof-of-burn&#34;&gt;（4）Proof of Burn&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801194207991.png&#34; alt=&#34;image-20200801194207991&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种销毁比特币的特性适用于以下几种场景：&lt;/p&gt;
&lt;p&gt;（1）为了得到altcoin（alternative coin）这种小币种，有的币要求销毁一个BTC就能获得其一部分币，这样确保是付出代价的。&lt;/p&gt;
&lt;p&gt;（2）向区块链中永久写入内容。可以内容写入RETURN语句的后面，类似于coinbase域写入内容（两者虽然都可以写入一部分内容，但是有些不一样：RETURN语句不论是哪个节点都可以写入，但是coinbase域只有获得记账权的矿工才能写入信息）&lt;/p&gt;
&lt;p&gt;下面是是一个&lt;strong&gt;Coinbase交易&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801195558212.png&#34; alt=&#34;image-20200801195558212&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面是一个普通的交易：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CBun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801195757733.png&#34; alt=&#34;image-20200801195757733&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—挖矿(6)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E6%8C%96%E7%9F%BF6/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E6%8C%96%E7%9F%BF6/</id>
            <updated>2020-08-23T20:09:29&#43;08:00</updated>
            <published>2020-08-23T20:09:06&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">挖矿难度 调整挖矿的难度就是调整使得找到符合 H(block header) &amp;lt;= target的nounce的难度 比特……</summary>
            
                <content type="html">&lt;h1 id=&#34;挖矿难度&#34;&gt;挖矿难度&lt;/h1&gt;
&lt;p&gt;调整挖矿的难度就是调整使得找到符合 H(block header) &amp;lt;= target的nounce的难度&lt;/p&gt;
&lt;p&gt;比特币的hash算法是采用的是SHA-256算法，也就是hash值得整个输出空间为2得256次方&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挖矿难度（difficulty）与目标预值（target）成反比例&lt;/strong&gt;，也就是target越大时，挖矿时越容易的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-在比特币系统中需要调整挖矿难度，为什么？&#34; data-lang=&#34;在比特币系统中需要调整挖矿难度，为什么？&#34;&gt;现在算力越来越强大，需要调整挖矿难度，使得出块的时间维持在10分钟左右，不能让出块的时间变得很快，这样会让攻击者发送分叉攻击（因为当出块的时间很短时，系统中可能会出现很多矿工同时打包到区块，假设这些矿工都是诚实的节点，这样在这些诚实的节点之间就产生了很多分叉，这就给恶意节点创造了机会，恶意节点可以在出现多个分叉的区块之前恶意分叉，然后在那个分叉的区块后面追加区块，这样，恶意节点就能跟容易的构造出一条最长合法链，因为此时诚实节点的算力被分割了，原本需要百分之51算力进行分叉攻击，而此时则不需要这么大的算力就能进行攻击）
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;如何调整挖矿难度&#34;&gt;如何调整挖矿难度&lt;/h2&gt;
&lt;p&gt;比特币中规定每隔2016个区块，就调整一次目标预值，大概时每2个星期调整一次&lt;/p&gt;
&lt;h5 id=&#34;迭代公式target--target--actual-timeexpected&#34;&gt;迭代公式：target = target * (actual time/expected)&lt;/h5&gt;
&lt;p&gt;注意：挖矿是&lt;strong&gt;无记忆性的（memoryless/progress free）&lt;/strong&gt;，也就是说，只要区块还没有被产生，那么挖出来区块的难度都是一定的，并不是说，一个节点在网络中挖出了块多就意味着后面他有更大的可能挖出区块，任何时候，在挖出区块之前，挖矿的难度都是一样的。&lt;/p&gt;
&lt;h1 id=&#34;挖矿&#34;&gt;挖矿&lt;/h1&gt;
&lt;h3 id=&#34;一节点分类&#34;&gt;一.节点分类&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;D:%5C%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99%5Cstudy_notes%5C%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E2%80%94%E2%80%94%E5%8C%97%E5%A4%A7%E8%82%96%E8%87%BB%5CScreenshot_20200728_172520.jpg&#34; alt=&#34;Screenshot_20200728_172520&#34;&gt;&lt;/p&gt;
&lt;p&gt;1.验证交易的合法性是看交易中是否有签名以及是否存在double spending（去UTXO集合中验证）&lt;/p&gt;
&lt;p&gt;2.验证其他矿工挖出的块的合法性是看：&lt;/p&gt;
&lt;p&gt;​	（1）块中TX是否合法&lt;/p&gt;
&lt;p&gt;​	（2）看块头的Hash是否满足难度要求&lt;/p&gt;
&lt;p&gt;​	（3）是否延伸最长合法链&lt;/p&gt;
&lt;p&gt;3.挖矿沿着最长合法连挖下去，出现等长的分叉时，最先选择先监听到的块进行分叉&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;D:%5C%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99%5Cstudy_notes%5C%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AF%BE%E2%80%94%E2%80%94%E5%8C%97%E5%A4%A7%E8%82%96%E8%87%BB%5CScreenshot_20200728_172507.jpg&#34; alt=&#34;Screenshot_20200728_172507&#34;&gt;&lt;/p&gt;
&lt;p&gt;1.比特币网络中绝大部分节点是轻节点（也成为SPV Client）&lt;/p&gt;
&lt;p&gt;2.轻节点虽然无法验证交易的有效性，但是能够验证块的挖矿难度是否符合要求（因为挖矿难度计算只需要块头即可，而轻节点就是只有块头）&lt;/p&gt;
&lt;h3 id=&#34;二挖矿的历程&#34;&gt;二.挖矿的历程&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;第一代&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;效率低，浪费很多其他资源&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;第二代&lt;/td&gt;
&lt;td&gt;GPU（显卡）&lt;/td&gt;
&lt;td&gt;效率有所提升，但是只用到整数运算(计算hash)，浪费了浮点运算，也是浪费了资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;第三代&lt;/td&gt;
&lt;td&gt;ASIC芯片（矿机）&lt;/td&gt;
&lt;td&gt;一种专门用于挖矿的芯片，特定的币只能用特定的ASIC芯片，除非两种币的挖矿模式一样&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;第四代&lt;/td&gt;
&lt;td&gt;大型矿池&lt;/td&gt;
&lt;td&gt;由许多矿工组成，其中有一个pool manager，管理着许多Miner，Minder只负责计算manaer分配的任务来计算出hash,出块后给manager即可，不做其他的事，而manager负责作为全节点中除了计算hash的其他任务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大型矿池的引入带来了一些好处，也带来了一些坏处：&lt;/p&gt;
&lt;p&gt;（1）好处：给予了矿工稳定的收入来源，当矿池中出块之后，只要矿池中的矿工参与了计算hash的任务，产生了一定的share，就会的到manager的奖励分红。（share越多，分红越多）&lt;/p&gt;
&lt;p&gt;（2）坏处：矿工并不知道自己是否在帮诚实的矿池干活还是不诚实的矿池干活，容易引发矿池的利用他们的算力发起攻击，因为矿工们只负责计算hash，没有其他的任务，他们无法验证交易的合法性。一旦矿池掌握了绝大部分的算力，就可以对比特币网络发起攻击，其中最常见的就是分叉攻击，从而实现双花攻击，还可以引发Boycott封锁攻击(不让某个账户的交易被写进区块中，封锁某些账户)&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—网络(5)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E7%BD%91%E7%BB%9C5/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E7%BD%91%E7%BB%9C5/</id>
            <updated>2020-08-23T20:08:52&#43;08:00</updated>
            <published>2020-08-23T20:08:40&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">比特币网络的工作原理 比特币工作在应用层（application layer) : Bitcoin Blockchain 底层的网络层（……</summary>
            
                <content type="html">&lt;h2 id=&#34;比特币网络的工作原理&#34;&gt;比特币网络的工作原理&lt;/h2&gt;
&lt;p&gt;比特币工作在应用层（application layer)	: Bitcoin Blockchain&lt;/p&gt;
&lt;p&gt;底层的网络层（network layer）: P2P Overlay Network&lt;/p&gt;
&lt;p&gt;比特币网络的原则是：简单(Simple)，鲁棒性&lt;/p&gt;
&lt;p&gt;网络节点之间采用的是flooding的方式&lt;/p&gt;
&lt;p&gt;比特币网路中的节点维护一个等待上链的集合，并且把这个交易转发给邻居节点，以后再收到这个交易的时候就不用再转发了，这样就避免交易在网络上无限传播&lt;/p&gt;
&lt;p&gt;比特币中的区块不能超过1MB。&lt;/p&gt;
&lt;p&gt;比特币网络的安全性保证是通过：&lt;/p&gt;
&lt;p&gt;（1）密码学（无私钥，无签名，所以就无法恶意转走别人的钱）（不可伪造）&lt;/p&gt;
&lt;p&gt;（2）共识机制（防止女巫攻击）&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—实现(4)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E5%AE%9E%E7%8E%B04/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E5%AE%9E%E7%8E%B04/</id>
            <updated>2020-08-23T20:08:27&#43;08:00</updated>
            <published>2020-08-23T20:07:43&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Transaction-based ledger(基于交易) 注：这种账本中每个账户上的余额是不直接显示的，要想知道一个……</summary>
            
                <content type="html">&lt;h1 id=&#34;transaction-based-ledger基于交易&#34;&gt;Transaction-based ledger(基于交易)&lt;/h1&gt;
&lt;p&gt;注：这种账本中每个账户上的余额是不直接显示的，要想知道一个账户上的余额，必须追溯交易的输入输出来推算出账户的余额&lt;/p&gt;
&lt;h3 id=&#34;utxo模型&#34;&gt;UTXO模型&lt;/h3&gt;
&lt;p&gt;比特币的全节点需要维护一个叫做&lt;strong&gt;UTXO&lt;/strong&gt;的数据结构（&lt;strong&gt;未花费的交易输出——Unspent Transaction Output&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;例如：&lt;strong&gt;一个交易可以有多个输出&lt;/strong&gt;，当A账户发起了一笔交易，这笔交易的输出是向B转账了5BTC，向C转账了3BTC，然后B将5BTC花出去了，C没有花费，所以此时向B的输出就不再UTXO中，而向C的输出在UTXO中，所以同一个交易，有的输出在UTXO中，有的交易不在UTXO中。如果有的账户，存在账户余额（比特币），但是始终不花出去，那么这个余额比特币会永远存在于UTXO集合中。&lt;/p&gt;
&lt;p&gt;所以&lt;strong&gt;UTXO集合当中的每个元素&lt;/strong&gt;，要给出&lt;strong&gt;产生这个输出的交易的hash值&lt;/strong&gt;以及它&lt;strong&gt;在这个交易中是第几个输出&lt;/strong&gt;，这两个信息可以定位到UTXO集合中某个特定的输出&lt;/p&gt;
&lt;h3 id=&#34;为什么要utxo这个模型呢&#34;&gt;为什么要UTXO这个模型呢？&lt;/h3&gt;
&lt;p&gt;为了检测Double Spending，也就是说，新产生的交易是否合法，需要查一下UTXO集合，也就是说，某个账户想要花费的币，必须要在UTXO集合当中才是合法的（如果不在UTXO集合中就说明，这个币要么是不存在的，要么是已经花费的）&lt;/p&gt;
&lt;p&gt;注：全节点要在内存中维护UTXO集合，以便快速检测Double Spending&lt;/p&gt;
&lt;h3 id=&#34;total-inputs--total-outputs&#34;&gt;Total inputs = Total outputs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注：一个交易可以有多个输出，而且也可以有多个输入，这也就是为什么一笔交易有时候需要多笔签名（每个输入地址都要提供对应的签名）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有些交易的total inputs略微大于total outputs，这里的差额就是&lt;strong&gt;交易费&lt;/strong&gt;（用于给获得记账权，发布区块的那个节点），之前还说过矿工打包区块还有&lt;strong&gt;出块奖励&lt;/strong&gt;（出块奖励是每21万个块减半，比特币中是每10分钟出一个区块，也就是说每4年，出块奖励减半）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-为什么要有交易费？&#34; data-lang=&#34;为什么要有交易费？&#34;&gt;矿工打包区块，网络中有很多交易，为什么要给你的交易打包区块呢，如果没有交易费用，矿工完全可以打包自己的交易获得出块奖励，所以为了避免这种情况，让矿工打包交易，奖励包括：出块奖励和交易费
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;account-based-ledger基于账户&#34;&gt;Account-based ledger(基于账户)&lt;/h1&gt;
&lt;p&gt;注：这种账本模式下，账户的余额会直接显示（以太坊就是基于这种账本模型），这种类似于平常的银行账户&lt;/p&gt;
&lt;p&gt;这两种账本模式，比特币的隐私保护比较好，但是，需要说明币的来源，以太坊就不需要说明币的来源&lt;/p&gt;
&lt;h1 id=&#34;关于比特币的数量&#34;&gt;关于比特币的数量&lt;/h1&gt;
&lt;p&gt;比特币系统中的所有币的总量是：&lt;/p&gt;
&lt;p&gt;21万 * 50 + 25万 * 25 + 21万 *12.5 + ...... = 21万 * 50 * （1+1/2+1/4+.....） = 21万 * 100 = 2100万&lt;/p&gt;
&lt;p&gt;（其中的50，25，12.5等等是出块奖励）&lt;/p&gt;
&lt;h1 id=&#34;比特币如何保证安全&#34;&gt;比特币如何保证安全&lt;/h1&gt;
&lt;p&gt;关于分叉攻击，最长合法链，攻击者让自己花出去的钱回滚。防止这种攻击只需要登带6个区块确认即可，也就是一个小时（因为网络中大部分还是诚实的节点，恶意节点即使分叉了一个区块，但是还要保证接下来的几个区块的记账权还是恶意节点的，所以这个花费的算力还是很大的）&lt;/p&gt;
&lt;p&gt;所以通常我们说的区块链是不可篡改的，是一种概率的说法，对于刚刚写入区块链的区块，是比较容易被改的，但是时间越久越不容易改，被篡改的概率会指数级别地下降·&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—共识协议(3)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE3/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE3/</id>
            <updated>2020-08-23T20:07:27&#43;08:00</updated>
            <published>2020-08-23T20:07:04&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">相对于传统的纸质货币，数字货币需要解决两个问题： 1.谁来发行货币，什么时候发行，发行……</summary>
            
                <content type="html">&lt;h3 id=&#34;相对于传统的纸质货币数字货币需要解决两个问题&#34;&gt;相对于传统的纸质货币，数字货币需要解决两个问题：&lt;/h3&gt;
&lt;p&gt;1.&lt;strong&gt;谁来发行货币，什么时候发行，发行多少&lt;/strong&gt;（这是&lt;strong&gt;挖矿&lt;/strong&gt;决定的）&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;如何验证交易的有效性&lt;/strong&gt;，传统的纸质货币，花出去就是花出去了，但是BTC这类电子货币相对于传统的纸质货币，首先面临的最大的问题就是双重支付，也就是**“双花攻击”——double spending** **attack**，因为这种电子货币是文件，是可复制的，如何验证货币已经花出去了，**防止双重支付**，是需要解决的问题&lt;/p&gt;
&lt;h2 id=&#34;一如何验证交易的有效性&#34;&gt;一.如何验证交易的有效性&lt;/h2&gt;
&lt;p&gt;如何防止双花攻击，传统的纸质货币可以由央行来维护，是一个中心化的机构，但是在数字货币中，需要集体来维护一个数据结构，是一个去中心化的，所以就诞生了区块链这种数据结构&lt;/p&gt;
&lt;h3 id=&#34;比特币系统中每个交易都包含输入和输出&#34;&gt;比特币系统中每个交易都包含输入和输出：&lt;/h3&gt;
&lt;p&gt;（1）输入：说明&lt;strong&gt;币的来源，以及转账者的公钥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（2）输出：给出&lt;strong&gt;收款人的公钥的hash&lt;/strong&gt;（用于找到收款人的比特币地址，可以做成类似于二维码）&lt;/p&gt;
&lt;p&gt;注意：此时由两种hash指针，&lt;strong&gt;一种指针就是连接各个区块构成一个链的；另一种指针就是指向前面某个交易的，也就是为了说明币的来源的&lt;/strong&gt;，为什么要说明币的来源，就是为了说明币不是凭空捏造的，更重要的是&lt;strong&gt;为了防止double spending&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注：在比特币系统中，每个交易的输入是一段&lt;strong&gt;脚本（bitcoin Script）&lt;/strong&gt;，每个交易的输出也是一段脚本，当验证交易是不是合法时（是否双重支付），就是要把&lt;strong&gt;当前交易的输入脚本&lt;/strong&gt;跟&lt;strong&gt;前面那个交易的输出脚本&lt;/strong&gt;拼在一起，看能否顺利执行，如果能执行，就是合法的。&lt;/p&gt;
&lt;h3 id=&#34;比特币区块的结构&#34;&gt;&lt;strong&gt;比特币区块的结构：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一个区块分为&lt;strong&gt;Block header和Block body&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Block header&lt;/strong&gt;：其中包含了比特币协议的版本（version），指向前一个区块的hash（hash of previous Block header），整个Merkle tree的根hash值（Merkle root hash）,挖矿的难度目标预值（target）,随机数（nounce）&lt;/p&gt;
&lt;p&gt;注：&lt;strong&gt;H(Block header)&amp;lt;=Target&lt;/strong&gt;，即整个块头的hash要小于等于目标预值，block header中存的就是这个目标预值的编码（&lt;strong&gt;nBits&lt;/strong&gt;）；指向前一个区块的hash（hash of previous Block header）是只算的区块头的hash，并没有区块体！！！！这个要特别注意&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Block body&lt;/strong&gt;：其中包含交易列表（transaction list）&lt;/p&gt;
&lt;h3 id=&#34;比特币中的节点&#34;&gt;比特币中的节点：&lt;/h3&gt;
&lt;p&gt;比特币中的节点分为：&lt;strong&gt;全节点（full node）和轻节点（light node）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全节点&lt;/strong&gt;：保存区块链所有的信息，验证每一个交易，所以全节点也叫做&lt;strong&gt;fully validation node&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轻节点&lt;/strong&gt;：并不保存所有信息&lt;/p&gt;
&lt;p&gt;比特币中所有的节点都可以进行交易，那这些&lt;strong&gt;交易应该由谁来记账，如何记账&lt;/strong&gt;呢，这就是需要解决的问题，因为区块链是一个分布式的账本，这个账本必须要所有人都认同，不能各记各的帐，所以账本需要取得&lt;strong&gt;分布式共识（distributed consensus）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分布式共识一个简单的例子就是&lt;strong&gt;分布式hash表（dstributed hash table——DHT）&lt;/strong&gt;,一个全局的hash表&lt;/p&gt;
&lt;p&gt;在分布式系统中，有很多&lt;strong&gt;不可能理论（impossiblity result）&lt;/strong&gt;,其中比较著名的有&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.FLP不可能理论&lt;/strong&gt;，即在一个异步（asynchronous）的系统中,网络时延没有上限，即使只有一个成员有问题，也不可能取得共识。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.CAP不可能理论&lt;/strong&gt;，C代表Consistency一致性，A代表Availibility可用性，P代表Partition tolerance容错性，这个理论说明了这三种性质最多只能满足两个，也就是必须要牺牲其中的一个&lt;/p&gt;
&lt;h3 id=&#34;比特币中的共识协议&#34;&gt;比特币中的共识协议&lt;/h3&gt;
&lt;p&gt;比特币系统中有的节点是恶意的，那么这种情况下怎么设计共识协议。&lt;/p&gt;
&lt;p&gt;只有找到符合&lt;strong&gt;H(Block header)&amp;lt;=Target&lt;/strong&gt; 的nounce的节点才有记账权利，其他的节点则是验证&lt;/p&gt;
&lt;p&gt;比特币中会出现分叉，只有&lt;strong&gt;最长链才是合法&lt;/strong&gt;的，是为了防止&lt;strong&gt;分叉攻击（forking attack）&lt;/strong&gt;，即通过分叉某个区块，来回滚已经发生的交易。当然分叉并非一定是恶意攻击，当出现多个节点在同一时刻同时计算出随机数nounce获得记账权，同时将区块写入账本中时就会出现分叉，这种分叉的情况会维持一段时间（看分叉的链中哪个先找到下一个区块），直到分叉链中的一条链胜出成为合法链（最长链）为止，这就是节点竞争获得记账权的过程，也就是共识的过程，大家都公认最长的链（账本）是正确的。&lt;/p&gt;
&lt;p&gt;那为什么会出现这种竞争记账的现象呢？&lt;/p&gt;
&lt;p&gt;因为有出块奖励（Block reward）！！！！也就是接下来要说的谁来发行货币&lt;/p&gt;
&lt;h2 id=&#34;二谁来发行货币&#34;&gt;二.谁来发行货币&lt;/h2&gt;
&lt;p&gt;coinbase transaction（铸币交易） 是比特币系统当中发行新的比特币货币的唯一方法，其他所有的交易都只是把已有的账户的货币转到其他账户&lt;/p&gt;
&lt;p&gt;一开始的时候，比特币系统中每写入一个区块，都有50BTC的奖励，但是规定每21万个区块之后，这个出块奖励就要减半&lt;/p&gt;
&lt;p&gt;所以比特币中要取得的共识是去这个中心化账本中的内容，而谁能决定账本中的内容呢，只有获得记账权的节点才能往账本中写入，那如何获得记账权呢，就是解&lt;strong&gt;H(Block header)&amp;lt;=Target&lt;/strong&gt; 这样一个难题(puzzle)这个puzzle没有捷径，只能一个一个去试，算出nounce，所以说，比特币的共识是靠算力的。所以如何一个节点的算力越大，那它获得记账权的概率就越大（hash rate决定了投票的权重），也就是靠算力来投票的，算力越大，获得记账的概率越大。所以基于算力的投票的共识可以防范女巫攻击（sybil attack，通过创建多个恶意节点进行投票获得共识），即使在一台机器上创建多个账户，并不会使hash rate 增加，并不会让节点每秒尝试的nounce的数目增加，并不会影响最终的共识结果&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC—数据结构(2)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842/</id>
            <updated>2020-08-23T20:39:12&#43;08:00</updated>
            <published>2020-08-23T20:06:04&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1.hash指针 普通的指针存储的是某个结构体在内存中的起始地址，但是hash地址除了……</summary>
            
                <content type="html">&lt;h2 id=&#34;1hash指针&#34;&gt;1.hash指针&lt;/h2&gt;
&lt;p&gt;普通的指针存储的是某个结构体在内存中的起始地址，但是hash地址除了存储这个地址，还存储结构体内容的hash，所以hash指针不仅可以找到地址还能检测出结构体内容是否被篡改&lt;/p&gt;
&lt;h4 id=&#34;区块链与普通的链表的区别&#34;&gt;区块链与普通的链表的区别：&lt;/h4&gt;
&lt;p&gt;区块链使用的是hash指针而不是普通的指针，注意hash指针的hash内容是整个区块的hash（也就是上一个区块中所有的内容，包括其中的hash指针），通过这种方式可以实现tamper-evident log，普通链表是可以改变其中一个区块的元素，对后面的区块没有影响，但是区块链不一样，只要其中一个区块发生变化，后面的区块后会发生变化，牵一发动全身，引发多米诺骨牌效应（因为后一个区块记录了上一个区块的hash）&lt;/p&gt;
&lt;h2 id=&#34;2merkel-tree&#34;&gt;2.Merkel tree&lt;/h2&gt;
&lt;p&gt;默克尔树与二叉排序树的区别就是用hash指针代替了普通的指针。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://VegeBun-csj.github.io/image/BTC/Merkle.png&#34; alt=&#34;Merkle树结构&#34;&gt;&lt;/p&gt;
&lt;p&gt;最底层是区块数据（上面的都是hash指针），然后将这些区块做hash，成为Merkel树的叶子节点，所以Merkle树也称为Hash Tree。最上面的被称为根hash（root hash）。&lt;/p&gt;
&lt;p&gt;Merkle树的这种结构被用来用做Merkle proof。&lt;/p&gt;
&lt;h2 id=&#34;3区块结构&#34;&gt;3.区块结构&lt;/h2&gt;
&lt;p&gt;区块分为区块头，区块体&lt;/p&gt;
&lt;p&gt;（1）区块头(Block Header)：存放了区块体中所有交易组成的Merkel Tree的根hash值&lt;/p&gt;
&lt;p&gt;（2）区块体(Block body)：其中存放了交易Tx列表&lt;/p&gt;
&lt;p&gt;比特币中的节点分为全节点和轻节点，全节点是拥有区块头和区块体的节点，而轻节点只含有区块头，也就是没有交易列表（无法立即验证交易的有效性/存在），所以对于轻节点想要验证交易时，需要向全节点获取一些信息来进行验证，此时就会用到Merkle Tree提供的Merkle proof&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://VegeBun-csj.github.io/image/BTC/Merkle_proof.png&#34; alt=&#34;Merkle proof&#34;&gt;&lt;/p&gt;
&lt;p&gt;当要验证图中的待证明的Tx时，需要从全节点获取其到根节点路径上的hash值（红色hash），从而计算出根hash，然后将这个计算出来的根hash与轻节点自己的区块头中保存的hash进行对照，如果相同认定交易时有效的，这就是Merkle proof的过程。复杂度是O(logn)&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">BTC 密码学原理(1)</title>
            <link rel="alternate" type="text/html" href="https://VegeBun-csj.github.io/posts/btc/btc-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%861/" />
            <id>https://VegeBun-csj.github.io/posts/btc/btc-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%861/</id>
            <updated>2020-08-23T20:05:42&#43;08:00</updated>
            <published>2020-08-23T20:04:54&#43;08:00</published>
            <author>
                    <name>Bun</name>
                    <uri>https://VegeBun-csj.github.io</uri>
                    <email>1071285741@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">比特币是一种加密货币——crypto-currency，但是其实加密的货币是不加密的……</summary>
            
                <content type="html">&lt;h6 id=&#34;比特币是一种加密货币crypto-currency但是其实加密的货币是不加密的区块链上的数据都是公开的包括账户的地址转账的金额等&#34;&gt;比特币是一种加密货币——crypto-currency，但是其实加密的货币是不加密的，区块链上的数据都是公开的，包括账户的地址，转账的金额等。&lt;/h6&gt;
&lt;h2 id=&#34;比特币中主要用到了密码学中的两个重要技术1hash---2签名&#34;&gt;比特币中主要用到了密码学中的两个重要技术：1.hash   2.签名&lt;/h2&gt;
&lt;h4 id=&#34;1密码学中的hash函数cryptographic-hash-function&#34;&gt;1.密码学中的hash函数（cryptographic hash function）&lt;/h4&gt;
&lt;h5 id=&#34;hash函数具有两个重要的性质&#34;&gt;hash函数具有两个重要的性质：&lt;/h5&gt;
&lt;p&gt;（1）&lt;strong&gt;collision resisitant(hash碰撞)&lt;/strong&gt; ：如果两个不同的输入能得到同一个输出，那这就是hash碰撞，即如果x不等于y，但是H(x)=H(y)。原则上，hash函数的碰撞是不可避免的，因为输入空间是远远大于输出空间的，比如有一个256位的hash值，那么最多可以表示2的256次方个hash，但是输入空间确实无限大的，即有任意多种输入的可能性，所以必然会出现两个输入映射到同一个输出的情况。但是没有什么有效的方法可以去找到有相同输出的两个输入，如果硬是要求解，就只能一个一个去试所有的输入（蛮力求解——brute-force），看哪两个符合。但是工作量很大。&lt;/p&gt;
&lt;p&gt;​       &lt;strong&gt;作用&lt;/strong&gt;：可以用来对一个message求hash,可以用来检测message是否被篡改。如果message有一点变化，那么hash值就会变化。所以可以保证攻击者无法篡改内容的同时又不被检测出来。MD5已经被破解&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;hiding(hash函数的计算过程是单向不可逆的)&lt;/strong&gt;：X-&amp;gt;H(X)，也就是说无法通过hash值反过来推导出原来的X，当然从理论上讲，只有通过蛮力的方式，通过不断尝试X，看看哪个H(x)与预期的hash值相同，就能得出原来的X，当然实际中是无法这样的，因为输入是无穷的。这个性质成立的前提是输入X的取值范围足够大，而且输入的分布比较均匀（数字，字母，字符等），使得这种蛮力求解的方式变得不可行。&lt;/p&gt;
&lt;p&gt;当然如果分布得不均匀，可以在X后面加一个随机数nounce拼接起来然后取hash,从而保证拼接之后输入是足够随机和均匀的。&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&#34;注意hash函数的这两个性质可以实现数字信封digital-commitmentdigital-equivalent-of-a-sealed-envelop&#34;&gt;注意：hash函数的这两个性质可以实现数字信封（digital commitment/digital equivalent of a sealed envelop）&lt;/h5&gt;
&lt;p&gt;（3）&lt;strong&gt;puzzle friendly(不可预测的)&lt;/strong&gt;：这是比特币中要求的hash函数的性质，也就是说通过输入，你是无法预测这个hash值落在哪个范围之内。唯一的办法就是蛮力，一个一个去试，看哪个输入算出来恰好落在要求的范围之内。比如说：你想得到一个hash值，前面k位都是0，后面是任意的，000......0000xxxxxxxx，所以要想得到这个输入值，只能一个一个去试。在比特币中挖矿也有这个概念——挖矿，挖矿的过程就是寻找这个随机数nounce的过程，这个nounce跟区块的块头中的其他信息合在一起，作为输入，取出一个hash值，这个hash值要小于等于指定的目标预值，即 &lt;strong&gt;H(Block header)&amp;lt;=Target&lt;/strong&gt;.挖矿就是不断地取nounce。&lt;strong&gt;这个性质使得挖矿的过程没有捷径，只能靠不停地去试来获得这个nounce，所以这个过程就可以用来作为工作量证明&lt;/strong&gt;。挖矿很难，但是验证很容易（difficult to solve but easy to verify）。&lt;/p&gt;
&lt;h3 id=&#34;2签名&#34;&gt;2.签名&lt;/h3&gt;
&lt;p&gt;比特币中的账户模型是一对公私钥，公钥代表账户的账号，私钥代表账户的密码。&lt;/p&gt;
&lt;p&gt;签名是用私钥进行签名，别人用公钥来验证签名的真实性。所以在比特币网络中进行交易时，通常将自己发起的交易用自己的私钥进行签名，然后发布到网络，然后其他人通过签名来验证确实是我做的交易，而不是其他人冒充。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/categories/%E6%AF%94%E7%89%B9%E5%B8%81/" term="比特币" label="比特币" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://VegeBun-csj.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" term="区块链" label="区块链" />
                            
                        
                    
                
            
        </entry>
    
</feed>
