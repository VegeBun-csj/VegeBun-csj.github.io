<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Oct 2020 21:26:31 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fabric中的账本数据存储</title>
      <link>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/fabric%E4%B8%AD%E7%9A%84%E8%B4%A6%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sun, 18 Oct 2020 21:26:31 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/fabric%E4%B8%AD%E7%9A%84%E8%B4%A6%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>Fabric账本数据的存储 Fabric账本数据存储模块提供了文件系统与键值型数据库用于存储账本数据，并被统一封装为Peer节点的账本对象（ k</description>
    </item>
    
    <item>
      <title>Fabric中的读写集</title>
      <link>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/fabric%E4%B8%AD%E7%9A%84%E8%AF%BB%E5%86%99%E9%9B%86/</link>
      <pubDate>Sun, 18 Oct 2020 21:25:21 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/fabric%E4%B8%AD%E7%9A%84%E8%AF%BB%E5%86%99%E9%9B%86/</guid>
      <description>Fabric中的读写集 在背书节点模拟执行交易期间，都会为每笔交易生成一个读写集。 读集(readset)包含了在模拟执行期间读取到的键的列表和</description>
    </item>
    
    <item>
      <title>链码常见的API</title>
      <link>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/%E9%93%BE%E7%A0%81%E5%B8%B8%E8%A7%81%E7%9A%84api/</link>
      <pubDate>Sun, 18 Oct 2020 21:24:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/%E9%93%BE%E7%A0%81%E5%B8%B8%E8%A7%81%E7%9A%84api/</guid>
      <description>levelDB和CouchDB都支持的API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 //键的写入 PutState(key string, value []byte) error //单个键的查询 GetState(key string) ([]byte, error) //键的范围查询(左</description>
    </item>
    
    <item>
      <title>Fabric启用CouchDB作为状态数据库</title>
      <link>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/fabric%E5%90%AF%E7%94%A8couchdb%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sun, 18 Oct 2020 21:22:31 +0800</pubDate>
      
      <guid>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/fabric%E5%90%AF%E7%94%A8couchdb%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>Fabric中启用CouchDB 使用CouchDB的注意点 当chaincode的数据模型被构建为Json格式的时候，可以使用CouchDB，</description>
    </item>
    
    <item>
      <title>CouchDB的基本语法</title>
      <link>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E5%BA%93/couchdb%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 11 Oct 2020 21:16:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E5%BA%93/couchdb%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>CouchDB基本语法 CouchDB的查询语法是json格式的，在其中可以通过特定的字段构建查询的逻辑，它的selector语法和Mongo</description>
    </item>
    
    <item>
      <title>Fabric交易流程的详细分析</title>
      <link>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/fabric%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B%E7%9A%84%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 11 Oct 2020 21:14:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/fabric%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B%E7%9A%84%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</guid>
      <description>Fabric交易流程的详细分析 总体来讲，一个交易流程分为3个阶段：交易的模拟执行、交易打包生成区块、账本的更新 交易流程图： 第一阶段： 客户端创</description>
    </item>
    
    <item>
      <title>背书节点和提交节点</title>
      <link>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E8%83%8C%E4%B9%A6%E8%8A%82%E7%82%B9%E5%92%8C%E6%8F%90%E4%BA%A4%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sat, 10 Oct 2020 21:11:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabric%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E8%83%8C%E4%B9%A6%E8%8A%82%E7%82%B9%E5%92%8C%E6%8F%90%E4%BA%A4%E8%8A%82%E7%82%B9/</guid>
      <description>背书节点（Endorser peer） 主要是对请求服务的签名提案消息 启动链码容器 模拟执行链码 签名背书 客户端提交到账本的普通交易都需要经过背书节</description>
    </item>
    
    <item>
      <title>动态添加组织</title>
      <link>http://localhost:1313/post/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E7%BB%84%E7%BB%87/</link>
      <pubDate>Mon, 05 Oct 2020 09:03:17 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E7%BB%84%E7%BB%87/</guid>
      <description>动态添加组织——CLI端 官方推荐将Cli容器与Org3cli容器的日志等级设置为DEBUG级别(但是我实际搭建也没有换，也没啥问题，可能是为</description>
    </item>
    
    <item>
      <title>动态添加peer节点</title>
      <link>http://localhost:1313/post/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0peer%E8%8A%82%E7%82%B9/</link>
      <pubDate>Mon, 05 Oct 2020 08:53:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0peer%E8%8A%82%E7%82%B9/</guid>
      <description>大致流程 生成节点证书文件(依然是用过crypto-config.yaml文件) 启动新节点的docker容器 节点加入通道 节点安装链码 节点端执行</description>
    </item>
    
    <item>
      <title>求逆序对(归排变种)</title>
      <link>http://localhost:1313/post/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9%E5%BD%92%E6%8E%92%E5%8F%98%E7%A7%8D/</link>
      <pubDate>Sun, 30 Aug 2020 15:43:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9%E5%BD%92%E6%8E%92%E5%8F%98%E7%A7%8D/</guid>
      <description>逆序对，简单的说就是一个序列中，前面的数的数值比后面的数的数值大，那么这两个数就可以构成一个逆序对。 比如说 1 4 7 2 1 这个序列中，{4，2}{</description>
    </item>
    
    <item>
      <title>快速选择(快排变种)--求第k个数</title>
      <link>http://localhost:1313/post/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9%E5%BF%AB%E6%8E%92%E5%8F%98%E7%A7%8D-%E6%B1%82%E7%AC%ACk%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Sun, 30 Aug 2020 14:38:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9%E5%BF%AB%E6%8E%92%E5%8F%98%E7%A7%8D-%E6%B1%82%E7%AC%ACk%E4%B8%AA%E6%95%B0/</guid>
      <description>对于求一个序列的第k个数，首先想到的就是将序列进行排序，然后输出第k-1的下标即可，但是排序的算法平均时间复杂度最优的也是O(nlogn)，</description>
    </item>
    
    <item>
      <title>排序(快排与归并)</title>
      <link>http://localhost:1313/post/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E5%BF%AB%E6%8E%92%E4%B8%8E%E5%BD%92%E5%B9%B6/</link>
      <pubDate>Sun, 30 Aug 2020 10:15:11 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E5%BF%AB%E6%8E%92%E4%B8%8E%E5%BD%92%E5%B9%B6/</guid>
      <description>对于基础算法可以形成模板来进行记忆，主要在于算法的思想和熟练度！！！ 快速排序 基本思想 找分界点，随便找，一般是a[l]，a[r]，a[l+r&amp;</description>
    </item>
    
    <item>
      <title>IPFS-js的简单使用</title>
      <link>http://localhost:1313/post/ipfs/ipfs-js%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 29 Aug 2020 14:51:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/ipfs/ipfs-js%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>fabric事件的监听使用</title>
      <link>http://localhost:1313/post/fabricnodesdk/%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 29 Aug 2020 14:34:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabricnodesdk/%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>使用fabric-network如何监听事件 本教程描述了使用fabricnetwork模块监听网络发出的事件的不同方法。 概览有三种事件类型可</description>
    </item>
    
    <item>
      <title>交易invoke的使用</title>
      <link>http://localhost:1313/post/fabricnodesdk/%E4%BA%A4%E6%98%93invoke%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 29 Aug 2020 14:25:47 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabricnodesdk/%E4%BA%A4%E6%98%93invoke%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Fabric 1.4.x的新版高级API(Fabrci-NetWork模块)的使用 新版api引入了fabric-network模块，在原来的fabric</description>
    </item>
    
    <item>
      <title>链码的访问控制(cid库)</title>
      <link>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/cid%E9%93%BE%E7%A0%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%BA%93/</link>
      <pubDate>Sat, 29 Aug 2020 13:27:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/chaincode%E5%BC%80%E5%8F%91/cid%E9%93%BE%E7%A0%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%BA%93/</guid>
      <description>Client Identity Chaincode Library（客户端标识链代码库） The client identity chaincode library enables you to write chaincode which makes access control decisions based on the identity of the client (i.e. the invoker of the chaincode). In particular, you may make access control decisions based on either or both of the following associated with the client: 客</description>
    </item>
    
    <item>
      <title>ccp文件的设置</title>
      <link>http://localhost:1313/post/fabricnodesdk/ccp-connection-file%E7%9A%84%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sat, 29 Aug 2020 13:03:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabricnodesdk/ccp-connection-file%E7%9A%84%E8%AE%BE%E7%BD%AE/</guid>
      <description>1.实验环境时，我们使用cli容器来进行链码的部署，实例化，以及进行简单的交易操作，但是在Fabric进行开发时，为了避免命令行的繁琐行，采</description>
    </item>
    
    <item>
      <title>fabric1.4.x 网络部署的一些坑</title>
      <link>http://localhost:1313/post/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/fabric1.4.x%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link>
      <pubDate>Fri, 28 Aug 2020 17:18:13 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fabric%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2/fabric1.4.x%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid>
      <description>下面的搭建主要是基于fabric1.4.x出现错误 1.创建通道出现错误(注意如果出现重复创建通道建议去清理网络) 1 config update for existing channel did not pass initial checks: implicit policy evaluation</description>
    </item>
    
    <item>
      <title>以太坊Ghost协议(5)</title>
      <link>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8Aghost%E5%8D%8F%E8%AE%AE5/</link>
      <pubDate>Mon, 24 Aug 2020 21:52:57 +0800</pubDate>
      
      <guid>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8Aghost%E5%8D%8F%E8%AE%AE5/</guid>
      <description>在以太坊中，出块的时间相对于BTC来说是非常短暂的，只有十几秒，但是出块时间越短，出现的短暂性分叉也就越多，这就会对部分节点，尤其是个体挖矿</description>
    </item>
    
    <item>
      <title>以太坊交易树和收据树(4)</title>
      <link>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BA%A4%E6%98%93%E6%A0%91%E5%92%8C%E6%94%B6%E6%8D%AE%E6%A0%914/</link>
      <pubDate>Mon, 24 Aug 2020 21:51:47 +0800</pubDate>
      
      <guid>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BA%A4%E6%98%93%E6%A0%91%E5%92%8C%E6%94%B6%E6%8D%AE%E6%A0%914/</guid>
      <description>交易树与状态树 状态树 交易树 收据树 (把系统中的所有状态都记录进去，不管账户是否与当前区块中的相关交易关联的账户是什么关系) 区块产生时会生成(类</description>
    </item>
    
    <item>
      <title>以太坊状态树(3)</title>
      <link>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%8A%B6%E6%80%81%E6%A0%913/</link>
      <pubDate>Mon, 24 Aug 2020 21:50:16 +0800</pubDate>
      
      <guid>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%8A%B6%E6%80%81%E6%A0%913/</guid>
      <description>在Ethereum中，账户的状态是以键值对&amp;lt;key,value&amp;gt;的形式保存的，账户地址为key，账户的状态就是value，即&amp;l</description>
    </item>
    
    <item>
      <title>以太坊账户(2)</title>
      <link>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%B4%A6%E6%88%B72/</link>
      <pubDate>Mon, 24 Aug 2020 21:46:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%B4%A6%E6%88%B72/</guid>
      <description>背景 比特币中采用的是基于交易的账本，这种模式下，系统中并没有显式地记录账户中有多少钱 ，只能根据UTXO中的信息来推算。这种方式的隐私性较好，</description>
    </item>
    
    <item>
      <title>以太坊概述(1)</title>
      <link>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%A6%82%E8%BF%B01/</link>
      <pubDate>Mon, 24 Aug 2020 21:40:38 +0800</pubDate>
      
      <guid>http://localhost:1313/post/eth/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%A6%82%E8%BF%B01/</guid>
      <description>以太坊被称为区块链2.0 创世人是V神，属于公有链的代表，和BTC的不同是，以太坊引入了智能合约，可以进行复杂的业务设计，不仅仅局限于解决pa</description>
    </item>
    
    <item>
      <title>Git的基本使用</title>
      <link>http://localhost:1313/post/git/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 23 Aug 2020 20:57:28 +0800</pubDate>
      
      <guid>http://localhost:1313/post/git/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>Git的基本使用 新项目提交至github 1 2 3 4 5 6 7 8 9 10 git init //创建本地仓库 git add . //提交全部 git commit -m &amp;#34;提交时的注释，尽量写，方便</description>
    </item>
    
  </channel>
</rss>